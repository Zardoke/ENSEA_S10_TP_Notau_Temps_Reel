
TP_Noyau_Temps_Reel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e44  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005014  08005014  00015014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005080  08005080  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005080  08005080  00015080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005088  08005088  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005088  08005088  00015088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800508c  0800508c  0001508c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004098  20000010  080050a0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040a8  080050a0  000240a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013da1  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f15  00000000  00000000  00033e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  00036d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da5  00000000  00000000  00037ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a32  00000000  00000000  00038c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015fd3  00000000  00000000  000606af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f99ac  00000000  00000000  00076682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000485c  00000000  00000000  00170030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0017488c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004ffc 	.word	0x08004ffc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08004ffc 	.word	0x08004ffc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000030 	.word	0x20000030
 800053c:	20000084 	.word	0x20000084

08000540 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <MX_FREERTOS_Init+0x30>)
 8000548:	1d3c      	adds	r4, r7, #4
 800054a:	461d      	mov	r5, r3
 800054c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000550:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000554:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f003 faf9 	bl	8003b54 <osThreadCreate>
 8000562:	4603      	mov	r3, r0
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <MX_FREERTOS_Init+0x34>)
 8000566:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000568:	bf00      	nop
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bdb0      	pop	{r4, r5, r7, pc}
 8000570:	08005020 	.word	0x08005020
 8000574:	2000002c 	.word	0x2000002c

08000578 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000580:	2001      	movs	r0, #1
 8000582:	f003 fb33 	bl	8003bec <osDelay>
 8000586:	e7fb      	b.n	8000580 <StartDefaultTask+0x8>

08000588 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b090      	sub	sp, #64	; 0x40
 800058c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800059e:	4bad      	ldr	r3, [pc, #692]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4aac      	ldr	r2, [pc, #688]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005a4:	f043 0310 	orr.w	r3, r3, #16
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4baa      	ldr	r3, [pc, #680]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0310 	and.w	r3, r3, #16
 80005b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80005b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005b6:	4ba7      	ldr	r3, [pc, #668]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4aa6      	ldr	r2, [pc, #664]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4ba4      	ldr	r3, [pc, #656]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
 80005cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	4ba1      	ldr	r3, [pc, #644]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4aa0      	ldr	r2, [pc, #640]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005d4:	f043 0302 	orr.w	r3, r3, #2
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b9e      	ldr	r3, [pc, #632]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	623b      	str	r3, [r7, #32]
 80005e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e6:	4b9b      	ldr	r3, [pc, #620]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a9a      	ldr	r2, [pc, #616]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b98      	ldr	r3, [pc, #608]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	61fb      	str	r3, [r7, #28]
 80005fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	4b95      	ldr	r3, [pc, #596]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a94      	ldr	r2, [pc, #592]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b92      	ldr	r3, [pc, #584]	; (8000854 <MX_GPIO_Init+0x2cc>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	61bb      	str	r3, [r7, #24]
 8000614:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b8f      	ldr	r3, [pc, #572]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a8e      	ldr	r2, [pc, #568]	; (8000854 <MX_GPIO_Init+0x2cc>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b8c      	ldr	r3, [pc, #560]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800062e:	4b89      	ldr	r3, [pc, #548]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a88      	ldr	r2, [pc, #544]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000634:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b86      	ldr	r3, [pc, #536]	; (8000854 <MX_GPIO_Init+0x2cc>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000646:	4b83      	ldr	r3, [pc, #524]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a82      	ldr	r2, [pc, #520]	; (8000854 <MX_GPIO_Init+0x2cc>)
 800064c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b80      	ldr	r3, [pc, #512]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800065e:	4b7d      	ldr	r3, [pc, #500]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a7c      	ldr	r2, [pc, #496]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000664:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b7a      	ldr	r3, [pc, #488]	; (8000854 <MX_GPIO_Init+0x2cc>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000676:	4b77      	ldr	r3, [pc, #476]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a76      	ldr	r2, [pc, #472]	; (8000854 <MX_GPIO_Init+0x2cc>)
 800067c:	f043 0320 	orr.w	r3, r3, #32
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b74      	ldr	r3, [pc, #464]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0320 	and.w	r3, r3, #32
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	4b71      	ldr	r3, [pc, #452]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a70      	ldr	r2, [pc, #448]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b6e      	ldr	r3, [pc, #440]	; (8000854 <MX_GPIO_Init+0x2cc>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2120      	movs	r1, #32
 80006aa:	486b      	ldr	r0, [pc, #428]	; (8000858 <MX_GPIO_Init+0x2d0>)
 80006ac:	f001 f94e 	bl	800194c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f241 010e 	movw	r1, #4110	; 0x100e
 80006b6:	4869      	ldr	r0, [pc, #420]	; (800085c <MX_GPIO_Init+0x2d4>)
 80006b8:	f001 f948 	bl	800194c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2108      	movs	r1, #8
 80006c0:	4867      	ldr	r0, [pc, #412]	; (8000860 <MX_GPIO_Init+0x2d8>)
 80006c2:	f001 f943 	bl	800194c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006cc:	4865      	ldr	r0, [pc, #404]	; (8000864 <MX_GPIO_Init+0x2dc>)
 80006ce:	f001 f93d 	bl	800194c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	21c8      	movs	r1, #200	; 0xc8
 80006d6:	4864      	ldr	r0, [pc, #400]	; (8000868 <MX_GPIO_Init+0x2e0>)
 80006d8:	f001 f938 	bl	800194c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80006dc:	2310      	movs	r3, #16
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e0:	2302      	movs	r3, #2
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80006ec:	230e      	movs	r3, #14
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006f4:	4619      	mov	r1, r3
 80006f6:	485d      	ldr	r0, [pc, #372]	; (800086c <MX_GPIO_Init+0x2e4>)
 80006f8:	f000 ff64 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80006fc:	2308      	movs	r3, #8
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000700:	2300      	movs	r3, #0
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000708:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800070c:	4619      	mov	r1, r3
 800070e:	4857      	ldr	r0, [pc, #348]	; (800086c <MX_GPIO_Init+0x2e4>)
 8000710:	f000 ff58 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000714:	2304      	movs	r3, #4
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000724:	2309      	movs	r3, #9
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800072c:	4619      	mov	r1, r3
 800072e:	484f      	ldr	r0, [pc, #316]	; (800086c <MX_GPIO_Init+0x2e4>)
 8000730:	f000 ff48 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000734:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000738:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073a:	2302      	movs	r3, #2
 800073c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000742:	2303      	movs	r3, #3
 8000744:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000746:	230b      	movs	r3, #11
 8000748:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800074a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800074e:	4619      	mov	r1, r3
 8000750:	4845      	ldr	r0, [pc, #276]	; (8000868 <MX_GPIO_Init+0x2e0>)
 8000752:	f000 ff37 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000756:	f64f 7383 	movw	r3, #65411	; 0xff83
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075c:	2302      	movs	r3, #2
 800075e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000764:	2303      	movs	r3, #3
 8000766:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000768:	230c      	movs	r3, #12
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800076c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000770:	4619      	mov	r1, r3
 8000772:	483e      	ldr	r0, [pc, #248]	; (800086c <MX_GPIO_Init+0x2e4>)
 8000774:	f000 ff26 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000778:	f44f 7340 	mov.w	r3, #768	; 0x300
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800077e:	2312      	movs	r3, #18
 8000780:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800078a:	2304      	movs	r3, #4
 800078c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000792:	4619      	mov	r1, r3
 8000794:	4836      	ldr	r0, [pc, #216]	; (8000870 <MX_GPIO_Init+0x2e8>)
 8000796:	f000 ff15 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800079a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	2302      	movs	r3, #2
 80007a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80007ac:	230a      	movs	r3, #10
 80007ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b4:	4619      	mov	r1, r3
 80007b6:	482e      	ldr	r0, [pc, #184]	; (8000870 <MX_GPIO_Init+0x2e8>)
 80007b8:	f000 ff04 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80007bc:	2310      	movs	r3, #16
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80007cc:	2302      	movs	r3, #2
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d4:	4619      	mov	r1, r3
 80007d6:	4826      	ldr	r0, [pc, #152]	; (8000870 <MX_GPIO_Init+0x2e8>)
 80007d8:	f000 fef4 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80007ec:	2308      	movs	r3, #8
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f4:	4619      	mov	r1, r3
 80007f6:	4818      	ldr	r0, [pc, #96]	; (8000858 <MX_GPIO_Init+0x2d0>)
 80007f8:	f000 fee4 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80007fc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080a:	2303      	movs	r3, #3
 800080c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800080e:	230c      	movs	r3, #12
 8000810:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000812:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000816:	4619      	mov	r1, r3
 8000818:	4816      	ldr	r0, [pc, #88]	; (8000874 <MX_GPIO_Init+0x2ec>)
 800081a:	f000 fed3 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800081e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000830:	2301      	movs	r3, #1
 8000832:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000838:	4619      	mov	r1, r3
 800083a:	480f      	ldr	r0, [pc, #60]	; (8000878 <MX_GPIO_Init+0x2f0>)
 800083c:	f000 fec2 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000840:	2360      	movs	r3, #96	; 0x60
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000850:	230d      	movs	r3, #13
 8000852:	e013      	b.n	800087c <MX_GPIO_Init+0x2f4>
 8000854:	40023800 	.word	0x40023800
 8000858:	40020c00 	.word	0x40020c00
 800085c:	40022000 	.word	0x40022000
 8000860:	40022800 	.word	0x40022800
 8000864:	40021c00 	.word	0x40021c00
 8000868:	40021800 	.word	0x40021800
 800086c:	40021000 	.word	0x40021000
 8000870:	40020400 	.word	0x40020400
 8000874:	40020800 	.word	0x40020800
 8000878:	40020000 	.word	0x40020000
 800087c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800087e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000882:	4619      	mov	r1, r3
 8000884:	48bc      	ldr	r0, [pc, #752]	; (8000b78 <MX_GPIO_Init+0x5f0>)
 8000886:	f000 fe9d 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800088a:	2340      	movs	r3, #64	; 0x40
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000896:	2303      	movs	r3, #3
 8000898:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800089a:	230a      	movs	r3, #10
 800089c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008a2:	4619      	mov	r1, r3
 80008a4:	48b5      	ldr	r0, [pc, #724]	; (8000b7c <MX_GPIO_Init+0x5f4>)
 80008a6:	f000 fe8d 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80008aa:	f248 1333 	movw	r3, #33075	; 0x8133
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008bc:	230c      	movs	r3, #12
 80008be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008c4:	4619      	mov	r1, r3
 80008c6:	48ae      	ldr	r0, [pc, #696]	; (8000b80 <MX_GPIO_Init+0x5f8>)
 80008c8:	f000 fe7c 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80008cc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008de:	230e      	movs	r3, #14
 80008e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80008e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e6:	4619      	mov	r1, r3
 80008e8:	48a6      	ldr	r0, [pc, #664]	; (8000b84 <MX_GPIO_Init+0x5fc>)
 80008ea:	f000 fe6b 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80008ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f4:	2300      	movs	r3, #0
 80008f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000900:	4619      	mov	r1, r3
 8000902:	48a0      	ldr	r0, [pc, #640]	; (8000b84 <MX_GPIO_Init+0x5fc>)
 8000904:	f000 fe5e 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000908:	2340      	movs	r3, #64	; 0x40
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800090c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000910:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800091a:	4619      	mov	r1, r3
 800091c:	489a      	ldr	r0, [pc, #616]	; (8000b88 <MX_GPIO_Init+0x600>)
 800091e:	f000 fe51 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000922:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000934:	230c      	movs	r3, #12
 8000936:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000938:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800093c:	4619      	mov	r1, r3
 800093e:	4892      	ldr	r0, [pc, #584]	; (8000b88 <MX_GPIO_Init+0x600>)
 8000940:	f000 fe40 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000944:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000956:	230a      	movs	r3, #10
 8000958:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800095e:	4619      	mov	r1, r3
 8000960:	488a      	ldr	r0, [pc, #552]	; (8000b8c <MX_GPIO_Init+0x604>)
 8000962:	f000 fe2f 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000966:	23f0      	movs	r3, #240	; 0xf0
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000976:	230a      	movs	r3, #10
 8000978:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800097a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800097e:	4619      	mov	r1, r3
 8000980:	4883      	ldr	r0, [pc, #524]	; (8000b90 <MX_GPIO_Init+0x608>)
 8000982:	f000 fe1f 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000986:	23f7      	movs	r3, #247	; 0xf7
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000996:	230e      	movs	r3, #14
 8000998:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800099a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099e:	4619      	mov	r1, r3
 80009a0:	487c      	ldr	r0, [pc, #496]	; (8000b94 <MX_GPIO_Init+0x60c>)
 80009a2:	f000 fe0f 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80009a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80009b8:	2309      	movs	r3, #9
 80009ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c0:	4619      	mov	r1, r3
 80009c2:	486f      	ldr	r0, [pc, #444]	; (8000b80 <MX_GPIO_Init+0x5f8>)
 80009c4:	f000 fdfe 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80009c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80009da:	230a      	movs	r3, #10
 80009dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e2:	4619      	mov	r1, r3
 80009e4:	4866      	ldr	r0, [pc, #408]	; (8000b80 <MX_GPIO_Init+0x5f8>)
 80009e6:	f000 fded 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009ea:	2320      	movs	r3, #32
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009fe:	4619      	mov	r1, r3
 8000a00:	4861      	ldr	r0, [pc, #388]	; (8000b88 <MX_GPIO_Init+0x600>)
 8000a02:	f000 fddf 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000a06:	2308      	movs	r3, #8
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a16:	230d      	movs	r3, #13
 8000a18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4859      	ldr	r0, [pc, #356]	; (8000b88 <MX_GPIO_Init+0x600>)
 8000a22:	f000 fdcf 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin;
 8000a26:	f241 030e 	movw	r3, #4110	; 0x100e
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4854      	ldr	r0, [pc, #336]	; (8000b90 <MX_GPIO_Init+0x608>)
 8000a40:	f000 fdc0 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a56:	4619      	mov	r1, r3
 8000a58:	484f      	ldr	r0, [pc, #316]	; (8000b98 <MX_GPIO_Init+0x610>)
 8000a5a:	f000 fdb3 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000a5e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a70:	230c      	movs	r3, #12
 8000a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4848      	ldr	r0, [pc, #288]	; (8000b9c <MX_GPIO_Init+0x614>)
 8000a7c:	f000 fda2 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000a80:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a92:	230e      	movs	r3, #14
 8000a94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	483c      	ldr	r0, [pc, #240]	; (8000b90 <MX_GPIO_Init+0x608>)
 8000a9e:	f000 fd91 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000aa2:	2308      	movs	r3, #8
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4836      	ldr	r0, [pc, #216]	; (8000b94 <MX_GPIO_Init+0x60c>)
 8000aba:	f000 fd83 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000abe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ad0:	230d      	movs	r3, #13
 8000ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4829      	ldr	r0, [pc, #164]	; (8000b80 <MX_GPIO_Init+0x5f8>)
 8000adc:	f000 fd72 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ae0:	2310      	movs	r3, #16
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000af0:	4619      	mov	r1, r3
 8000af2:	4825      	ldr	r0, [pc, #148]	; (8000b88 <MX_GPIO_Init+0x600>)
 8000af4:	f000 fd66 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000af8:	2304      	movs	r3, #4
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b08:	230c      	movs	r3, #12
 8000b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b10:	4619      	mov	r1, r3
 8000b12:	481d      	ldr	r0, [pc, #116]	; (8000b88 <MX_GPIO_Init+0x600>)
 8000b14:	f000 fd56 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000b18:	f248 0304 	movw	r3, #32772	; 0x8004
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	481c      	ldr	r0, [pc, #112]	; (8000ba0 <MX_GPIO_Init+0x618>)
 8000b2e:	f000 fd49 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000b32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4815      	ldr	r0, [pc, #84]	; (8000ba0 <MX_GPIO_Init+0x618>)
 8000b4c:	f000 fd3a 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000b50:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b62:	230d      	movs	r3, #13
 8000b64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <MX_GPIO_Init+0x618>)
 8000b6e:	f000 fd29 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e016      	b.n	8000ba4 <MX_GPIO_Init+0x61c>
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40020400 	.word	0x40020400
 8000b80:	40021800 	.word	0x40021800
 8000b84:	40022400 	.word	0x40022400
 8000b88:	40020c00 	.word	0x40020c00
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	40022000 	.word	0x40022000
 8000b94:	40022800 	.word	0x40022800
 8000b98:	40020800 	.word	0x40020800
 8000b9c:	40021400 	.word	0x40021400
 8000ba0:	40021c00 	.word	0x40021c00
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bba:	4619      	mov	r1, r3
 8000bbc:	48a4      	ldr	r0, [pc, #656]	; (8000e50 <MX_GPIO_Init+0x8c8>)
 8000bbe:	f000 fd01 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000bc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	489d      	ldr	r0, [pc, #628]	; (8000e50 <MX_GPIO_Init+0x8c8>)
 8000bda:	f000 fcf3 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4896      	ldr	r0, [pc, #600]	; (8000e54 <MX_GPIO_Init+0x8cc>)
 8000bfc:	f000 fce2 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c06:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c14:	4619      	mov	r1, r3
 8000c16:	488e      	ldr	r0, [pc, #568]	; (8000e50 <MX_GPIO_Init+0x8c8>)
 8000c18:	f000 fcd4 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000c1c:	23c0      	movs	r3, #192	; 0xc0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c34:	4619      	mov	r1, r3
 8000c36:	4888      	ldr	r0, [pc, #544]	; (8000e58 <MX_GPIO_Init+0x8d0>)
 8000c38:	f000 fcc4 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000c3c:	2310      	movs	r3, #16
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c4c:	230a      	movs	r3, #10
 8000c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c54:	4619      	mov	r1, r3
 8000c56:	4881      	ldr	r0, [pc, #516]	; (8000e5c <MX_GPIO_Init+0x8d4>)
 8000c58:	f000 fcb4 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000c5c:	2328      	movs	r3, #40	; 0x28
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c74:	4619      	mov	r1, r3
 8000c76:	4879      	ldr	r0, [pc, #484]	; (8000e5c <MX_GPIO_Init+0x8d4>)
 8000c78:	f000 fca4 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000c7c:	23c8      	movs	r3, #200	; 0xc8
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c90:	4619      	mov	r1, r3
 8000c92:	4873      	ldr	r0, [pc, #460]	; (8000e60 <MX_GPIO_Init+0x8d8>)
 8000c94:	f000 fc96 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000c98:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ca6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000caa:	4619      	mov	r1, r3
 8000cac:	486d      	ldr	r0, [pc, #436]	; (8000e64 <MX_GPIO_Init+0x8dc>)
 8000cae:	f000 fc89 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000cb2:	2308      	movs	r3, #8
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4862      	ldr	r0, [pc, #392]	; (8000e58 <MX_GPIO_Init+0x8d0>)
 8000cce:	f000 fc79 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ce2:	230a      	movs	r3, #10
 8000ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cea:	4619      	mov	r1, r3
 8000cec:	485a      	ldr	r0, [pc, #360]	; (8000e58 <MX_GPIO_Init+0x8d0>)
 8000cee:	f000 fc69 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cf2:	2332      	movs	r3, #50	; 0x32
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d02:	230b      	movs	r3, #11
 8000d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4852      	ldr	r0, [pc, #328]	; (8000e58 <MX_GPIO_Init+0x8d0>)
 8000d0e:	f000 fc59 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d12:	2304      	movs	r3, #4
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d22:	2309      	movs	r3, #9
 8000d24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	484e      	ldr	r0, [pc, #312]	; (8000e68 <MX_GPIO_Init+0x8e0>)
 8000d2e:	f000 fc49 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000d32:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d44:	2309      	movs	r3, #9
 8000d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4847      	ldr	r0, [pc, #284]	; (8000e6c <MX_GPIO_Init+0x8e4>)
 8000d50:	f000 fc38 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000d54:	2304      	movs	r3, #4
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d64:	4619      	mov	r1, r3
 8000d66:	483e      	ldr	r0, [pc, #248]	; (8000e60 <MX_GPIO_Init+0x8d8>)
 8000d68:	f000 fc2c 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d6c:	2386      	movs	r3, #134	; 0x86
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d7c:	230b      	movs	r3, #11
 8000d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d84:	4619      	mov	r1, r3
 8000d86:	4833      	ldr	r0, [pc, #204]	; (8000e54 <MX_GPIO_Init+0x8cc>)
 8000d88:	f000 fc1c 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d90:	2303      	movs	r3, #3
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	482d      	ldr	r0, [pc, #180]	; (8000e54 <MX_GPIO_Init+0x8cc>)
 8000da0:	f000 fc10 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000da4:	2350      	movs	r3, #80	; 0x50
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000db4:	230d      	movs	r3, #13
 8000db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4825      	ldr	r0, [pc, #148]	; (8000e54 <MX_GPIO_Init+0x8cc>)
 8000dc0:	f000 fc00 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000dc4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dca:	2312      	movs	r3, #18
 8000dcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dde:	4619      	mov	r1, r3
 8000de0:	481e      	ldr	r0, [pc, #120]	; (8000e5c <MX_GPIO_Init+0x8d4>)
 8000de2:	f000 fbef 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000de6:	2328      	movs	r3, #40	; 0x28
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000df6:	230a      	movs	r3, #10
 8000df8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4814      	ldr	r0, [pc, #80]	; (8000e54 <MX_GPIO_Init+0x8cc>)
 8000e02:	f000 fbdf 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000e06:	2340      	movs	r3, #64	; 0x40
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000e16:	2309      	movs	r3, #9
 8000e18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480e      	ldr	r0, [pc, #56]	; (8000e5c <MX_GPIO_Init+0x8d4>)
 8000e22:	f000 fbcf 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000e26:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e38:	2305      	movs	r3, #5
 8000e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e40:	4619      	mov	r1, r3
 8000e42:	4809      	ldr	r0, [pc, #36]	; (8000e68 <MX_GPIO_Init+0x8e0>)
 8000e44:	f000 fbbe 	bl	80015c4 <HAL_GPIO_Init>

}
 8000e48:	bf00      	nop
 8000e4a:	3740      	adds	r7, #64	; 0x40
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40022000 	.word	0x40022000
 8000e54:	40020000 	.word	0x40020000
 8000e58:	40020800 	.word	0x40020800
 8000e5c:	40021c00 	.word	0x40021c00
 8000e60:	40021800 	.word	0x40021800
 8000e64:	40021400 	.word	0x40021400
 8000e68:	40020400 	.word	0x40020400
 8000e6c:	40020c00 	.word	0x40020c00

08000e70 <__io_putchar>:
/* USER CODE BEGIN 0 */
// Déclaration d'une variable globale pour indiquer la réception de données UART
uint8_t uart_rx_flag = 0;

// Fonction de sortie de caractères utilisée par HAL pour transmettre des caractères sur l'UART
int __io_putchar(int ch) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	// Transmet le caractère sur l'UART1 avec HAL_UART_Transmit
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e78:	1d39      	adds	r1, r7, #4
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <__io_putchar+0x20>)
 8000e82:	f002 f9c1 	bl	8003208 <HAL_UART_Transmit>
	return ch;
 8000e86:	687b      	ldr	r3, [r7, #4]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200002d0 	.word	0x200002d0

08000e94 <task_blink_led>:
	// Met à jour le drapeau pour indiquer que des données ont été reçues
	uart_rx_flag = 1;
}

// Tâche pour faire clignoter une LED à intervalles réguliers
void task_blink_led(void * unused) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	char *text = "LED ON\r\n";
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <task_blink_led+0x5c>)
 8000e9e:	60fb      	str	r3, [r7, #12]
	//int Val=0;
	while (1) {
		// Alterne l'état de la LED avec HAL_GPIO_TogglePin
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	4814      	ldr	r0, [pc, #80]	; (8000ef4 <task_blink_led+0x60>)
 8000ea4:	f000 fd6b 	bl	800197e <HAL_GPIO_TogglePin>

		// Vérifie l'état de la LED pour déterminer le texte à afficher
		if (HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin) == GPIO_PIN_SET) {
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	4812      	ldr	r0, [pc, #72]	; (8000ef4 <task_blink_led+0x60>)
 8000eac:	f000 fd36 	bl	800191c <HAL_GPIO_ReadPin>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d102      	bne.n	8000ebc <task_blink_led+0x28>
			text = "LED ON\r\n";
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <task_blink_led+0x5c>)
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	e001      	b.n	8000ec0 <task_blink_led+0x2c>
		} else {
			text = "LED OFF\r\n";
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <task_blink_led+0x64>)
 8000ebe:	60fb      	str	r3, [r7, #12]
		}

		// Affiche le texte sur l'UART
		for (int i = 0; text[i] != '\0'; i++) {
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	e009      	b.n	8000eda <task_blink_led+0x46>
			__io_putchar(text[i]);
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	4413      	add	r3, r2
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ffce 	bl	8000e70 <__io_putchar>
		for (int i = 0; text[i] != '\0'; i++) {
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1ef      	bne.n	8000ec6 <task_blink_led+0x32>
		}

		// Suspend l'exécution de la tâche pendant 1000 millisecondes
		vTaskDelay(1000);
 8000ee6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eea:	f003 f8e3 	bl	80040b4 <vTaskDelay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000eee:	e7d7      	b.n	8000ea0 <task_blink_led+0xc>
 8000ef0:	0800503c 	.word	0x0800503c
 8000ef4:	40022000 	.word	0x40022000
 8000ef8:	08005048 	.word	0x08005048

08000efc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f02:	f000 fa50 	bl	80013a6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f06:	f000 f81b 	bl	8000f40 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f0a:	f7ff fb3d 	bl	8000588 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000f0e:	f000 f96f 	bl	80011f0 <MX_USART1_UART_Init>
	TaskHandle_t handle_blink_led; // Déclaration du gestionnaire de tâche pour la tâche "Blink LED"
	//TaskHandle_t handle_uart;      // Déclaration du gestionnaire de tâche pour la tâche "UART"

	/* 1ère Tâche créée */
	// Crée une tâche pour faire clignoter la LED
	xTaskCreate(
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	2303      	movs	r3, #3
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f20:	4905      	ldr	r1, [pc, #20]	; (8000f38 <main+0x3c>)
 8000f22:	4806      	ldr	r0, [pc, #24]	; (8000f3c <main+0x40>)
 8000f24:	f002 ff8d 	bl	8003e42 <xTaskCreate>
			3,                 // Priorité de la tâche
			&handle_blink_led  // Pointeur vers la variable de gestion de tâche pour récupérer le handle de la tâche
	);

	// Démarre le planificateur de tâches FreeRTOS
	vTaskStartScheduler();
 8000f28:	f003 f8fa 	bl	8004120 <vTaskStartScheduler>
	//Ne rien écrire après cette ligne

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8000f2c:	f7ff fb08 	bl	8000540 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000f30:	f002 fe09 	bl	8003b46 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000f34:	e7fe      	b.n	8000f34 <main+0x38>
 8000f36:	bf00      	nop
 8000f38:	08005054 	.word	0x08005054
 8000f3c:	08000e95 	.word	0x08000e95

08000f40 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b094      	sub	sp, #80	; 0x50
 8000f44:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	2230      	movs	r2, #48	; 0x30
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f004 f828 	bl	8004fa4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f64:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <SystemClock_Config+0xd0>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	4a29      	ldr	r2, [pc, #164]	; (8001010 <SystemClock_Config+0xd0>)
 8000f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f70:	4b27      	ldr	r3, [pc, #156]	; (8001010 <SystemClock_Config+0xd0>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f7c:	4b25      	ldr	r3, [pc, #148]	; (8001014 <SystemClock_Config+0xd4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a24      	ldr	r2, [pc, #144]	; (8001014 <SystemClock_Config+0xd4>)
 8000f82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <SystemClock_Config+0xd4>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f94:	2302      	movs	r3, #2
 8000f96:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f9c:	2310      	movs	r3, #16
 8000f9e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000fa8:	2308      	movs	r3, #8
 8000faa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 216;
 8000fac:	23d8      	movs	r3, #216	; 0xd8
 8000fae:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb8:	f107 0320 	add.w	r3, r7, #32
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 fd49 	bl	8001a54 <HAL_RCC_OscConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0x8c>
	{
		Error_Handler();
 8000fc8:	f000 f838 	bl	800103c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fcc:	f000 fcf2 	bl	80019b4 <HAL_PWREx_EnableOverDrive>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000fd6:	f000 f831 	bl	800103c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fda:	230f      	movs	r3, #15
 8000fdc:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fe6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fea:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2107      	movs	r1, #7
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 ffcf 	bl	8001f9c <HAL_RCC_ClockConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0xc8>
	{
		Error_Handler();
 8001004:	f000 f81a 	bl	800103c <Error_Handler>
	}
}
 8001008:	bf00      	nop
 800100a:	3750      	adds	r7, #80	; 0x50
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800
 8001014:	40007000 	.word	0x40007000

08001018 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800102a:	f000 f9c9 	bl	80013c0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40001000 	.word	0x40001000

0800103c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001040:	b672      	cpsid	i
}
 8001042:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001044:	e7fe      	b.n	8001044 <Error_Handler+0x8>
	...

08001048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_MspInit+0x4c>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	4a10      	ldr	r2, [pc, #64]	; (8001094 <HAL_MspInit+0x4c>)
 8001054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001058:	6413      	str	r3, [r2, #64]	; 0x40
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_MspInit+0x4c>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_MspInit+0x4c>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <HAL_MspInit+0x4c>)
 800106c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001070:	6453      	str	r3, [r2, #68]	; 0x44
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_MspInit+0x4c>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	210f      	movs	r1, #15
 8001082:	f06f 0001 	mvn.w	r0, #1
 8001086:	f000 fa73 	bl	8001570 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800

08001098 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08e      	sub	sp, #56	; 0x38
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010a8:	4b33      	ldr	r3, [pc, #204]	; (8001178 <HAL_InitTick+0xe0>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	4a32      	ldr	r2, [pc, #200]	; (8001178 <HAL_InitTick+0xe0>)
 80010ae:	f043 0310 	orr.w	r3, r3, #16
 80010b2:	6413      	str	r3, [r2, #64]	; 0x40
 80010b4:	4b30      	ldr	r3, [pc, #192]	; (8001178 <HAL_InitTick+0xe0>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	f003 0310 	and.w	r3, r3, #16
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010c0:	f107 0210 	add.w	r2, r7, #16
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 f94c 	bl	8002368 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010d0:	6a3b      	ldr	r3, [r7, #32]
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d103      	bne.n	80010e2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010da:	f001 f91d 	bl	8002318 <HAL_RCC_GetPCLK1Freq>
 80010de:	6378      	str	r0, [r7, #52]	; 0x34
 80010e0:	e004      	b.n	80010ec <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010e2:	f001 f919 	bl	8002318 <HAL_RCC_GetPCLK1Freq>
 80010e6:	4603      	mov	r3, r0
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ee:	4a23      	ldr	r2, [pc, #140]	; (800117c <HAL_InitTick+0xe4>)
 80010f0:	fba2 2303 	umull	r2, r3, r2, r3
 80010f4:	0c9b      	lsrs	r3, r3, #18
 80010f6:	3b01      	subs	r3, #1
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <HAL_InitTick+0xe8>)
 80010fc:	4a21      	ldr	r2, [pc, #132]	; (8001184 <HAL_InitTick+0xec>)
 80010fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <HAL_InitTick+0xe8>)
 8001102:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001106:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001108:	4a1d      	ldr	r2, [pc, #116]	; (8001180 <HAL_InitTick+0xe8>)
 800110a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800110c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800110e:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <HAL_InitTick+0xe8>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <HAL_InitTick+0xe8>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <HAL_InitTick+0xe8>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001120:	4817      	ldr	r0, [pc, #92]	; (8001180 <HAL_InitTick+0xe8>)
 8001122:	f001 fd43 	bl	8002bac <HAL_TIM_Base_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800112c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001130:	2b00      	cmp	r3, #0
 8001132:	d11b      	bne.n	800116c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001134:	4812      	ldr	r0, [pc, #72]	; (8001180 <HAL_InitTick+0xe8>)
 8001136:	f001 fd9b 	bl	8002c70 <HAL_TIM_Base_Start_IT>
 800113a:	4603      	mov	r3, r0
 800113c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001140:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001144:	2b00      	cmp	r3, #0
 8001146:	d111      	bne.n	800116c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001148:	2036      	movs	r0, #54	; 0x36
 800114a:	f000 fa2d 	bl	80015a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b0f      	cmp	r3, #15
 8001152:	d808      	bhi.n	8001166 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001154:	2200      	movs	r2, #0
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	2036      	movs	r0, #54	; 0x36
 800115a:	f000 fa09 	bl	8001570 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <HAL_InitTick+0xf0>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	e002      	b.n	800116c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800116c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001170:	4618      	mov	r0, r3
 8001172:	3738      	adds	r7, #56	; 0x38
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40023800 	.word	0x40023800
 800117c:	431bde83 	.word	0x431bde83
 8001180:	20000284 	.word	0x20000284
 8001184:	40001000 	.word	0x40001000
 8001188:	20000004 	.word	0x20000004

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001190:	e7fe      	b.n	8001190 <NMI_Handler+0x4>

08001192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <MemManage_Handler+0x4>

0800119e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <UsageFault_Handler+0x4>

080011aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <TIM6_DAC_IRQHandler+0x10>)
 80011be:	f001 fdcf 	bl	8002d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000284 	.word	0x20000284

080011cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <SystemInit+0x20>)
 80011d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <SystemInit+0x20>)
 80011d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_USART1_UART_Init+0x58>)
 80011f6:	4a15      	ldr	r2, [pc, #84]	; (800124c <MX_USART1_UART_Init+0x5c>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <MX_USART1_UART_Init+0x58>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_USART1_UART_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_USART1_UART_Init+0x58>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_USART1_UART_Init+0x58>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_USART1_UART_Init+0x58>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_USART1_UART_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_USART1_UART_Init+0x58>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <MX_USART1_UART_Init+0x58>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_USART1_UART_Init+0x58>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_USART1_UART_Init+0x58>)
 8001234:	f001 ff9a 	bl	800316c <HAL_UART_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800123e:	f7ff fefd 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200002d0 	.word	0x200002d0
 800124c:	40011000 	.word	0x40011000

08001250 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b0ac      	sub	sp, #176	; 0xb0
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001268:	f107 0318 	add.w	r3, r7, #24
 800126c:	2284      	movs	r2, #132	; 0x84
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f003 fe97 	bl	8004fa4 <memset>
  if(uartHandle->Instance==USART1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a32      	ldr	r2, [pc, #200]	; (8001344 <HAL_UART_MspInit+0xf4>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d15c      	bne.n	800133a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001280:	2340      	movs	r3, #64	; 0x40
 8001282:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001284:	2300      	movs	r3, #0
 8001286:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001288:	f107 0318 	add.w	r3, r7, #24
 800128c:	4618      	mov	r0, r3
 800128e:	f001 f89d 	bl	80023cc <HAL_RCCEx_PeriphCLKConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001298:	f7ff fed0 	bl	800103c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800129c:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <HAL_UART_MspInit+0xf8>)
 800129e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a0:	4a29      	ldr	r2, [pc, #164]	; (8001348 <HAL_UART_MspInit+0xf8>)
 80012a2:	f043 0310 	orr.w	r3, r3, #16
 80012a6:	6453      	str	r3, [r2, #68]	; 0x44
 80012a8:	4b27      	ldr	r3, [pc, #156]	; (8001348 <HAL_UART_MspInit+0xf8>)
 80012aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ac:	f003 0310 	and.w	r3, r3, #16
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b4:	4b24      	ldr	r3, [pc, #144]	; (8001348 <HAL_UART_MspInit+0xf8>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	4a23      	ldr	r2, [pc, #140]	; (8001348 <HAL_UART_MspInit+0xf8>)
 80012ba:	f043 0302 	orr.w	r3, r3, #2
 80012be:	6313      	str	r3, [r2, #48]	; 0x30
 80012c0:	4b21      	ldr	r3, [pc, #132]	; (8001348 <HAL_UART_MspInit+0xf8>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <HAL_UART_MspInit+0xf8>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <HAL_UART_MspInit+0xf8>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6313      	str	r3, [r2, #48]	; 0x30
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <HAL_UART_MspInit+0xf8>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012fc:	2307      	movs	r3, #7
 80012fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001306:	4619      	mov	r1, r3
 8001308:	4810      	ldr	r0, [pc, #64]	; (800134c <HAL_UART_MspInit+0xfc>)
 800130a:	f000 f95b 	bl	80015c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800130e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001312:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001328:	2307      	movs	r3, #7
 800132a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800132e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001332:	4619      	mov	r1, r3
 8001334:	4806      	ldr	r0, [pc, #24]	; (8001350 <HAL_UART_MspInit+0x100>)
 8001336:	f000 f945 	bl	80015c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800133a:	bf00      	nop
 800133c:	37b0      	adds	r7, #176	; 0xb0
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40011000 	.word	0x40011000
 8001348:	40023800 	.word	0x40023800
 800134c:	40020400 	.word	0x40020400
 8001350:	40020000 	.word	0x40020000

08001354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800138c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800135a:	490e      	ldr	r1, [pc, #56]	; (8001394 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800135c:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001360:	e002      	b.n	8001368 <LoopCopyDataInit>

08001362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001366:	3304      	adds	r3, #4

08001368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800136c:	d3f9      	bcc.n	8001362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136e:	4a0b      	ldr	r2, [pc, #44]	; (800139c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001370:	4c0b      	ldr	r4, [pc, #44]	; (80013a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001374:	e001      	b.n	800137a <LoopFillZerobss>

08001376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001378:	3204      	adds	r2, #4

0800137a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800137c:	d3fb      	bcc.n	8001376 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800137e:	f7ff ff25 	bl	80011cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001382:	f003 fe17 	bl	8004fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001386:	f7ff fdb9 	bl	8000efc <main>
  bx  lr    
 800138a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800138c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001394:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001398:	08005090 	.word	0x08005090
  ldr r2, =_sbss
 800139c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80013a0:	200040a8 	.word	0x200040a8

080013a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a4:	e7fe      	b.n	80013a4 <ADC_IRQHandler>

080013a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013aa:	2003      	movs	r0, #3
 80013ac:	f000 f8d5 	bl	800155a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b0:	200f      	movs	r0, #15
 80013b2:	f7ff fe71 	bl	8001098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b6:	f7ff fe47 	bl	8001048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_IncTick+0x20>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_IncTick+0x24>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4413      	add	r3, r2
 80013d0:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <HAL_IncTick+0x24>)
 80013d2:	6013      	str	r3, [r2, #0]
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000008 	.word	0x20000008
 80013e4:	20000358 	.word	0x20000358

080013e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return uwTick;
 80013ec:	4b03      	ldr	r3, [pc, #12]	; (80013fc <HAL_GetTick+0x14>)
 80013ee:	681b      	ldr	r3, [r3, #0]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000358 	.word	0x20000358

08001400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <__NVIC_SetPriorityGrouping+0x40>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800141c:	4013      	ands	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 800142a:	4313      	orrs	r3, r2
 800142c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142e:	4a04      	ldr	r2, [pc, #16]	; (8001440 <__NVIC_SetPriorityGrouping+0x40>)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	60d3      	str	r3, [r2, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00
 8001444:	05fa0000 	.word	0x05fa0000

08001448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <__NVIC_GetPriorityGrouping+0x18>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	f003 0307 	and.w	r3, r3, #7
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	db0b      	blt.n	800148e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	f003 021f 	and.w	r2, r3, #31
 800147c:	4907      	ldr	r1, [pc, #28]	; (800149c <__NVIC_EnableIRQ+0x38>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	2001      	movs	r0, #1
 8001486:	fa00 f202 	lsl.w	r2, r0, r2
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000e100 	.word	0xe000e100

080014a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	db0a      	blt.n	80014ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	490c      	ldr	r1, [pc, #48]	; (80014ec <__NVIC_SetPriority+0x4c>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	0112      	lsls	r2, r2, #4
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	440b      	add	r3, r1
 80014c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c8:	e00a      	b.n	80014e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4908      	ldr	r1, [pc, #32]	; (80014f0 <__NVIC_SetPriority+0x50>)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	3b04      	subs	r3, #4
 80014d8:	0112      	lsls	r2, r2, #4
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	440b      	add	r3, r1
 80014de:	761a      	strb	r2, [r3, #24]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000e100 	.word	0xe000e100
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f1c3 0307 	rsb	r3, r3, #7
 800150e:	2b04      	cmp	r3, #4
 8001510:	bf28      	it	cs
 8001512:	2304      	movcs	r3, #4
 8001514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3304      	adds	r3, #4
 800151a:	2b06      	cmp	r3, #6
 800151c:	d902      	bls.n	8001524 <NVIC_EncodePriority+0x30>
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3b03      	subs	r3, #3
 8001522:	e000      	b.n	8001526 <NVIC_EncodePriority+0x32>
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	f04f 32ff 	mov.w	r2, #4294967295
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	401a      	ands	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800153c:	f04f 31ff 	mov.w	r1, #4294967295
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43d9      	mvns	r1, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	4313      	orrs	r3, r2
         );
}
 800154e:	4618      	mov	r0, r3
 8001550:	3724      	adds	r7, #36	; 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ff4c 	bl	8001400 <__NVIC_SetPriorityGrouping>
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001582:	f7ff ff61 	bl	8001448 <__NVIC_GetPriorityGrouping>
 8001586:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	68b9      	ldr	r1, [r7, #8]
 800158c:	6978      	ldr	r0, [r7, #20]
 800158e:	f7ff ffb1 	bl	80014f4 <NVIC_EncodePriority>
 8001592:	4602      	mov	r2, r0
 8001594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001598:	4611      	mov	r1, r2
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff80 	bl	80014a0 <__NVIC_SetPriority>
}
 80015a0:	bf00      	nop
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff54 	bl	8001464 <__NVIC_EnableIRQ>
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
 80015e2:	e175      	b.n	80018d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80015e4:	2201      	movs	r2, #1
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	f040 8164 	bne.w	80018ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b01      	cmp	r3, #1
 800160c:	d005      	beq.n	800161a <HAL_GPIO_Init+0x56>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d130      	bne.n	800167c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	2203      	movs	r2, #3
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001650:	2201      	movs	r2, #1
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	f003 0201 	and.w	r2, r3, #1
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b03      	cmp	r3, #3
 8001686:	d017      	beq.n	80016b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	2203      	movs	r2, #3
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d123      	bne.n	800170c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	08da      	lsrs	r2, r3, #3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3208      	adds	r2, #8
 80016cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	220f      	movs	r2, #15
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	08da      	lsrs	r2, r3, #3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3208      	adds	r2, #8
 8001706:	69b9      	ldr	r1, [r7, #24]
 8001708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	2203      	movs	r2, #3
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0203 	and.w	r2, r3, #3
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 80be 	beq.w	80018ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	4b66      	ldr	r3, [pc, #408]	; (80018e8 <HAL_GPIO_Init+0x324>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a65      	ldr	r2, [pc, #404]	; (80018e8 <HAL_GPIO_Init+0x324>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b63      	ldr	r3, [pc, #396]	; (80018e8 <HAL_GPIO_Init+0x324>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001766:	4a61      	ldr	r2, [pc, #388]	; (80018ec <HAL_GPIO_Init+0x328>)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	3302      	adds	r3, #2
 800176e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	220f      	movs	r2, #15
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a58      	ldr	r2, [pc, #352]	; (80018f0 <HAL_GPIO_Init+0x32c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d037      	beq.n	8001802 <HAL_GPIO_Init+0x23e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a57      	ldr	r2, [pc, #348]	; (80018f4 <HAL_GPIO_Init+0x330>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d031      	beq.n	80017fe <HAL_GPIO_Init+0x23a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a56      	ldr	r2, [pc, #344]	; (80018f8 <HAL_GPIO_Init+0x334>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d02b      	beq.n	80017fa <HAL_GPIO_Init+0x236>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a55      	ldr	r2, [pc, #340]	; (80018fc <HAL_GPIO_Init+0x338>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d025      	beq.n	80017f6 <HAL_GPIO_Init+0x232>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a54      	ldr	r2, [pc, #336]	; (8001900 <HAL_GPIO_Init+0x33c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d01f      	beq.n	80017f2 <HAL_GPIO_Init+0x22e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a53      	ldr	r2, [pc, #332]	; (8001904 <HAL_GPIO_Init+0x340>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d019      	beq.n	80017ee <HAL_GPIO_Init+0x22a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a52      	ldr	r2, [pc, #328]	; (8001908 <HAL_GPIO_Init+0x344>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d013      	beq.n	80017ea <HAL_GPIO_Init+0x226>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a51      	ldr	r2, [pc, #324]	; (800190c <HAL_GPIO_Init+0x348>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d00d      	beq.n	80017e6 <HAL_GPIO_Init+0x222>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a50      	ldr	r2, [pc, #320]	; (8001910 <HAL_GPIO_Init+0x34c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d007      	beq.n	80017e2 <HAL_GPIO_Init+0x21e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4f      	ldr	r2, [pc, #316]	; (8001914 <HAL_GPIO_Init+0x350>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d101      	bne.n	80017de <HAL_GPIO_Init+0x21a>
 80017da:	2309      	movs	r3, #9
 80017dc:	e012      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017de:	230a      	movs	r3, #10
 80017e0:	e010      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017e2:	2308      	movs	r3, #8
 80017e4:	e00e      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017e6:	2307      	movs	r3, #7
 80017e8:	e00c      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017ea:	2306      	movs	r3, #6
 80017ec:	e00a      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017ee:	2305      	movs	r3, #5
 80017f0:	e008      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017f2:	2304      	movs	r3, #4
 80017f4:	e006      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017f6:	2303      	movs	r3, #3
 80017f8:	e004      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e002      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <HAL_GPIO_Init+0x240>
 8001802:	2300      	movs	r3, #0
 8001804:	69fa      	ldr	r2, [r7, #28]
 8001806:	f002 0203 	and.w	r2, r2, #3
 800180a:	0092      	lsls	r2, r2, #2
 800180c:	4093      	lsls	r3, r2
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001814:	4935      	ldr	r1, [pc, #212]	; (80018ec <HAL_GPIO_Init+0x328>)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	3302      	adds	r3, #2
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001822:	4b3d      	ldr	r3, [pc, #244]	; (8001918 <HAL_GPIO_Init+0x354>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001846:	4a34      	ldr	r2, [pc, #208]	; (8001918 <HAL_GPIO_Init+0x354>)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800184c:	4b32      	ldr	r3, [pc, #200]	; (8001918 <HAL_GPIO_Init+0x354>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001870:	4a29      	ldr	r2, [pc, #164]	; (8001918 <HAL_GPIO_Init+0x354>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001876:	4b28      	ldr	r3, [pc, #160]	; (8001918 <HAL_GPIO_Init+0x354>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800189a:	4a1f      	ldr	r2, [pc, #124]	; (8001918 <HAL_GPIO_Init+0x354>)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_GPIO_Init+0x354>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <HAL_GPIO_Init+0x354>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3301      	adds	r3, #1
 80018ce:	61fb      	str	r3, [r7, #28]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	2b0f      	cmp	r3, #15
 80018d4:	f67f ae86 	bls.w	80015e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40013800 	.word	0x40013800
 80018f0:	40020000 	.word	0x40020000
 80018f4:	40020400 	.word	0x40020400
 80018f8:	40020800 	.word	0x40020800
 80018fc:	40020c00 	.word	0x40020c00
 8001900:	40021000 	.word	0x40021000
 8001904:	40021400 	.word	0x40021400
 8001908:	40021800 	.word	0x40021800
 800190c:	40021c00 	.word	0x40021c00
 8001910:	40022000 	.word	0x40022000
 8001914:	40022400 	.word	0x40022400
 8001918:	40013c00 	.word	0x40013c00

0800191c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	887b      	ldrh	r3, [r7, #2]
 800192e:	4013      	ands	r3, r2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	e001      	b.n	800193e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	807b      	strh	r3, [r7, #2]
 8001958:	4613      	mov	r3, r2
 800195a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800195c:	787b      	ldrb	r3, [r7, #1]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001962:	887a      	ldrh	r2, [r7, #2]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001968:	e003      	b.n	8001972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800196a:	887b      	ldrh	r3, [r7, #2]
 800196c:	041a      	lsls	r2, r3, #16
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	619a      	str	r2, [r3, #24]
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800197e:	b480      	push	{r7}
 8001980:	b085      	sub	sp, #20
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001990:	887a      	ldrh	r2, [r7, #2]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4013      	ands	r3, r2
 8001996:	041a      	lsls	r2, r3, #16
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	43d9      	mvns	r1, r3
 800199c:	887b      	ldrh	r3, [r7, #2]
 800199e:	400b      	ands	r3, r1
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	619a      	str	r2, [r3, #24]
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <HAL_PWREx_EnableOverDrive+0x98>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a22      	ldr	r2, [pc, #136]	; (8001a4c <HAL_PWREx_EnableOverDrive+0x98>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <HAL_PWREx_EnableOverDrive+0x98>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80019d6:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a1d      	ldr	r2, [pc, #116]	; (8001a50 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019e2:	f7ff fd01 	bl	80013e8 <HAL_GetTick>
 80019e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019e8:	e009      	b.n	80019fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019ea:	f7ff fcfd 	bl	80013e8 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019f8:	d901      	bls.n	80019fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e022      	b.n	8001a44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0a:	d1ee      	bne.n	80019ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a0c:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a18:	f7ff fce6 	bl	80013e8 <HAL_GetTick>
 8001a1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a1e:	e009      	b.n	8001a34 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a20:	f7ff fce2 	bl	80013e8 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a2e:	d901      	bls.n	8001a34 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e007      	b.n	8001a44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a40:	d1ee      	bne.n	8001a20 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40007000 	.word	0x40007000

08001a54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e291      	b.n	8001f8e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 8087 	beq.w	8001b86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a78:	4b96      	ldr	r3, [pc, #600]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d00c      	beq.n	8001a9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a84:	4b93      	ldr	r3, [pc, #588]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d112      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x62>
 8001a90:	4b90      	ldr	r3, [pc, #576]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a9c:	d10b      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9e:	4b8d      	ldr	r3, [pc, #564]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d06c      	beq.n	8001b84 <HAL_RCC_OscConfig+0x130>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d168      	bne.n	8001b84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e26b      	b.n	8001f8e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001abe:	d106      	bne.n	8001ace <HAL_RCC_OscConfig+0x7a>
 8001ac0:	4b84      	ldr	r3, [pc, #528]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a83      	ldr	r2, [pc, #524]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	e02e      	b.n	8001b2c <HAL_RCC_OscConfig+0xd8>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x9c>
 8001ad6:	4b7f      	ldr	r3, [pc, #508]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a7e      	ldr	r2, [pc, #504]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	4b7c      	ldr	r3, [pc, #496]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a7b      	ldr	r2, [pc, #492]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e01d      	b.n	8001b2c <HAL_RCC_OscConfig+0xd8>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af8:	d10c      	bne.n	8001b14 <HAL_RCC_OscConfig+0xc0>
 8001afa:	4b76      	ldr	r3, [pc, #472]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a75      	ldr	r2, [pc, #468]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	4b73      	ldr	r3, [pc, #460]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a72      	ldr	r2, [pc, #456]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e00b      	b.n	8001b2c <HAL_RCC_OscConfig+0xd8>
 8001b14:	4b6f      	ldr	r3, [pc, #444]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a6e      	ldr	r2, [pc, #440]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b6c      	ldr	r3, [pc, #432]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a6b      	ldr	r2, [pc, #428]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d013      	beq.n	8001b5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff fc58 	bl	80013e8 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7ff fc54 	bl	80013e8 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	; 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e21f      	b.n	8001f8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	4b61      	ldr	r3, [pc, #388]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0xe8>
 8001b5a:	e014      	b.n	8001b86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fc44 	bl	80013e8 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b64:	f7ff fc40 	bl	80013e8 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b64      	cmp	r3, #100	; 0x64
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e20b      	b.n	8001f8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	4b57      	ldr	r3, [pc, #348]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x110>
 8001b82:	e000      	b.n	8001b86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d069      	beq.n	8001c66 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b92:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00b      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b9e:	4b4d      	ldr	r3, [pc, #308]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d11c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x190>
 8001baa:	4b4a      	ldr	r3, [pc, #296]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d116      	bne.n	8001be4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb6:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <HAL_RCC_OscConfig+0x17a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d001      	beq.n	8001bce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e1df      	b.n	8001f8e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bce:	4b41      	ldr	r3, [pc, #260]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	493d      	ldr	r1, [pc, #244]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be2:	e040      	b.n	8001c66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d023      	beq.n	8001c34 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bec:	4b39      	ldr	r3, [pc, #228]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a38      	ldr	r2, [pc, #224]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fbf6 	bl	80013e8 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c00:	f7ff fbf2 	bl	80013e8 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e1bd      	b.n	8001f8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c12:	4b30      	ldr	r3, [pc, #192]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1e:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4929      	ldr	r1, [pc, #164]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]
 8001c32:	e018      	b.n	8001c66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c34:	4b27      	ldr	r3, [pc, #156]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a26      	ldr	r2, [pc, #152]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001c3a:	f023 0301 	bic.w	r3, r3, #1
 8001c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff fbd2 	bl	80013e8 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c48:	f7ff fbce 	bl	80013e8 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e199      	b.n	8001f8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5a:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d038      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d019      	beq.n	8001cae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7a:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c7e:	4a15      	ldr	r2, [pc, #84]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c86:	f7ff fbaf 	bl	80013e8 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c8e:	f7ff fbab 	bl	80013e8 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e176      	b.n	8001f8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x23a>
 8001cac:	e01a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb2:	4a08      	ldr	r2, [pc, #32]	; (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001cb4:	f023 0301 	bic.w	r3, r3, #1
 8001cb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cba:	f7ff fb95 	bl	80013e8 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc0:	e00a      	b.n	8001cd8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc2:	f7ff fb91 	bl	80013e8 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d903      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e15c      	b.n	8001f8e <HAL_RCC_OscConfig+0x53a>
 8001cd4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd8:	4b91      	ldr	r3, [pc, #580]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1ee      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 80a4 	beq.w	8001e3a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf2:	4b8b      	ldr	r3, [pc, #556]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10d      	bne.n	8001d1a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	4b88      	ldr	r3, [pc, #544]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4a87      	ldr	r2, [pc, #540]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d08:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0a:	4b85      	ldr	r3, [pc, #532]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d16:	2301      	movs	r3, #1
 8001d18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d1a:	4b82      	ldr	r3, [pc, #520]	; (8001f24 <HAL_RCC_OscConfig+0x4d0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d118      	bne.n	8001d58 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d26:	4b7f      	ldr	r3, [pc, #508]	; (8001f24 <HAL_RCC_OscConfig+0x4d0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a7e      	ldr	r2, [pc, #504]	; (8001f24 <HAL_RCC_OscConfig+0x4d0>)
 8001d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d32:	f7ff fb59 	bl	80013e8 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3a:	f7ff fb55 	bl	80013e8 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b64      	cmp	r3, #100	; 0x64
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e120      	b.n	8001f8e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d4c:	4b75      	ldr	r3, [pc, #468]	; (8001f24 <HAL_RCC_OscConfig+0x4d0>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d106      	bne.n	8001d6e <HAL_RCC_OscConfig+0x31a>
 8001d60:	4b6f      	ldr	r3, [pc, #444]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d64:	4a6e      	ldr	r2, [pc, #440]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d6c:	e02d      	b.n	8001dca <HAL_RCC_OscConfig+0x376>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x33c>
 8001d76:	4b6a      	ldr	r3, [pc, #424]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7a:	4a69      	ldr	r2, [pc, #420]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001d7c:	f023 0301 	bic.w	r3, r3, #1
 8001d80:	6713      	str	r3, [r2, #112]	; 0x70
 8001d82:	4b67      	ldr	r3, [pc, #412]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d86:	4a66      	ldr	r2, [pc, #408]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001d88:	f023 0304 	bic.w	r3, r3, #4
 8001d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8e:	e01c      	b.n	8001dca <HAL_RCC_OscConfig+0x376>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b05      	cmp	r3, #5
 8001d96:	d10c      	bne.n	8001db2 <HAL_RCC_OscConfig+0x35e>
 8001d98:	4b61      	ldr	r3, [pc, #388]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9c:	4a60      	ldr	r2, [pc, #384]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001d9e:	f043 0304 	orr.w	r3, r3, #4
 8001da2:	6713      	str	r3, [r2, #112]	; 0x70
 8001da4:	4b5e      	ldr	r3, [pc, #376]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da8:	4a5d      	ldr	r2, [pc, #372]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6713      	str	r3, [r2, #112]	; 0x70
 8001db0:	e00b      	b.n	8001dca <HAL_RCC_OscConfig+0x376>
 8001db2:	4b5b      	ldr	r3, [pc, #364]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db6:	4a5a      	ldr	r2, [pc, #360]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001db8:	f023 0301 	bic.w	r3, r3, #1
 8001dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dbe:	4b58      	ldr	r3, [pc, #352]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc2:	4a57      	ldr	r2, [pc, #348]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001dc4:	f023 0304 	bic.w	r3, r3, #4
 8001dc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d015      	beq.n	8001dfe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd2:	f7ff fb09 	bl	80013e8 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd8:	e00a      	b.n	8001df0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dda:	f7ff fb05 	bl	80013e8 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e0ce      	b.n	8001f8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0ee      	beq.n	8001dda <HAL_RCC_OscConfig+0x386>
 8001dfc:	e014      	b.n	8001e28 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfe:	f7ff faf3 	bl	80013e8 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e04:	e00a      	b.n	8001e1c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f7ff faef 	bl	80013e8 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e0b8      	b.n	8001f8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1ee      	bne.n	8001e06 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e28:	7dfb      	ldrb	r3, [r7, #23]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d105      	bne.n	8001e3a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e2e:	4b3c      	ldr	r3, [pc, #240]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	4a3b      	ldr	r2, [pc, #236]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 80a4 	beq.w	8001f8c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e44:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 030c 	and.w	r3, r3, #12
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d06b      	beq.n	8001f28 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d149      	bne.n	8001eec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e58:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a30      	ldr	r2, [pc, #192]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7ff fac0 	bl	80013e8 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7ff fabc 	bl	80013e8 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e087      	b.n	8001f8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69da      	ldr	r2, [r3, #28]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	019b      	lsls	r3, r3, #6
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea0:	085b      	lsrs	r3, r3, #1
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	041b      	lsls	r3, r3, #16
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	061b      	lsls	r3, r3, #24
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	4a1b      	ldr	r2, [pc, #108]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001eb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001eb6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a18      	ldr	r2, [pc, #96]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001ebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec4:	f7ff fa90 	bl	80013e8 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7ff fa8c 	bl	80013e8 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e057      	b.n	8001f8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x478>
 8001eea:	e04f      	b.n	8001f8c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001ef2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fa76 	bl	80013e8 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f00:	f7ff fa72 	bl	80013e8 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e03d      	b.n	8001f8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f12:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x4ac>
 8001f1e:	e035      	b.n	8001f8c <HAL_RCC_OscConfig+0x538>
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f28:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_RCC_OscConfig+0x544>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d028      	beq.n	8001f88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d121      	bne.n	8001f88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d11a      	bne.n	8001f88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f58:	4013      	ands	r3, r2
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f5e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d111      	bne.n	8001f88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6e:	085b      	lsrs	r3, r3, #1
 8001f70:	3b01      	subs	r3, #1
 8001f72:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d107      	bne.n	8001f88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f82:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800

08001f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0d0      	b.n	8002156 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb4:	4b6a      	ldr	r3, [pc, #424]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d910      	bls.n	8001fe4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc2:	4b67      	ldr	r3, [pc, #412]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 020f 	bic.w	r2, r3, #15
 8001fca:	4965      	ldr	r1, [pc, #404]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	4b63      	ldr	r3, [pc, #396]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0b8      	b.n	8002156 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d020      	beq.n	8002032 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ffc:	4b59      	ldr	r3, [pc, #356]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	4a58      	ldr	r2, [pc, #352]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 8002002:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002006:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002014:	4b53      	ldr	r3, [pc, #332]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4a52      	ldr	r2, [pc, #328]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 800201a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800201e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002020:	4b50      	ldr	r3, [pc, #320]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	494d      	ldr	r1, [pc, #308]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 800202e:	4313      	orrs	r3, r2
 8002030:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d040      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d107      	bne.n	8002056 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	4b47      	ldr	r3, [pc, #284]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d115      	bne.n	800207e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e07f      	b.n	8002156 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d107      	bne.n	800206e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205e:	4b41      	ldr	r3, [pc, #260]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d109      	bne.n	800207e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e073      	b.n	8002156 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206e:	4b3d      	ldr	r3, [pc, #244]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e06b      	b.n	8002156 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800207e:	4b39      	ldr	r3, [pc, #228]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f023 0203 	bic.w	r2, r3, #3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	4936      	ldr	r1, [pc, #216]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 800208c:	4313      	orrs	r3, r2
 800208e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002090:	f7ff f9aa 	bl	80013e8 <HAL_GetTick>
 8002094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002096:	e00a      	b.n	80020ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002098:	f7ff f9a6 	bl	80013e8 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e053      	b.n	8002156 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ae:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 020c 	and.w	r2, r3, #12
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	429a      	cmp	r2, r3
 80020be:	d1eb      	bne.n	8002098 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020c0:	4b27      	ldr	r3, [pc, #156]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 030f 	and.w	r3, r3, #15
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d210      	bcs.n	80020f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ce:	4b24      	ldr	r3, [pc, #144]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 020f 	bic.w	r2, r3, #15
 80020d6:	4922      	ldr	r1, [pc, #136]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020de:	4b20      	ldr	r3, [pc, #128]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e032      	b.n	8002156 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4916      	ldr	r1, [pc, #88]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 800210a:	4313      	orrs	r3, r2
 800210c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800211a:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	490e      	ldr	r1, [pc, #56]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 800212a:	4313      	orrs	r3, r2
 800212c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800212e:	f000 f821 	bl	8002174 <HAL_RCC_GetSysClockFreq>
 8002132:	4602      	mov	r2, r0
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	490a      	ldr	r1, [pc, #40]	; (8002168 <HAL_RCC_ClockConfig+0x1cc>)
 8002140:	5ccb      	ldrb	r3, [r1, r3]
 8002142:	fa22 f303 	lsr.w	r3, r2, r3
 8002146:	4a09      	ldr	r2, [pc, #36]	; (800216c <HAL_RCC_ClockConfig+0x1d0>)
 8002148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_RCC_ClockConfig+0x1d4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe ffa2 	bl	8001098 <HAL_InitTick>

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40023c00 	.word	0x40023c00
 8002164:	40023800 	.word	0x40023800
 8002168:	08005068 	.word	0x08005068
 800216c:	20000000 	.word	0x20000000
 8002170:	20000004 	.word	0x20000004

08002174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002178:	b090      	sub	sp, #64	; 0x40
 800217a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	637b      	str	r3, [r7, #52]	; 0x34
 8002180:	2300      	movs	r3, #0
 8002182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002184:	2300      	movs	r3, #0
 8002186:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800218c:	4b59      	ldr	r3, [pc, #356]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 030c 	and.w	r3, r3, #12
 8002194:	2b08      	cmp	r3, #8
 8002196:	d00d      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002198:	2b08      	cmp	r3, #8
 800219a:	f200 80a1 	bhi.w	80022e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0x34>
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d003      	beq.n	80021ae <HAL_RCC_GetSysClockFreq+0x3a>
 80021a6:	e09b      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021a8:	4b53      	ldr	r3, [pc, #332]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80021aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021ac:	e09b      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021ae:	4b53      	ldr	r3, [pc, #332]	; (80022fc <HAL_RCC_GetSysClockFreq+0x188>)
 80021b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021b2:	e098      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021b4:	4b4f      	ldr	r3, [pc, #316]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021bc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80021be:	4b4d      	ldr	r3, [pc, #308]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d028      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ca:	4b4a      	ldr	r3, [pc, #296]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	099b      	lsrs	r3, r3, #6
 80021d0:	2200      	movs	r2, #0
 80021d2:	623b      	str	r3, [r7, #32]
 80021d4:	627a      	str	r2, [r7, #36]	; 0x24
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80021dc:	2100      	movs	r1, #0
 80021de:	4b47      	ldr	r3, [pc, #284]	; (80022fc <HAL_RCC_GetSysClockFreq+0x188>)
 80021e0:	fb03 f201 	mul.w	r2, r3, r1
 80021e4:	2300      	movs	r3, #0
 80021e6:	fb00 f303 	mul.w	r3, r0, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	4a43      	ldr	r2, [pc, #268]	; (80022fc <HAL_RCC_GetSysClockFreq+0x188>)
 80021ee:	fba0 1202 	umull	r1, r2, r0, r2
 80021f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021f4:	460a      	mov	r2, r1
 80021f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80021f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021fa:	4413      	add	r3, r2
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002200:	2200      	movs	r2, #0
 8002202:	61bb      	str	r3, [r7, #24]
 8002204:	61fa      	str	r2, [r7, #28]
 8002206:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800220a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800220e:	f7fd ffff 	bl	8000210 <__aeabi_uldivmod>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4613      	mov	r3, r2
 8002218:	63fb      	str	r3, [r7, #60]	; 0x3c
 800221a:	e053      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800221c:	4b35      	ldr	r3, [pc, #212]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	099b      	lsrs	r3, r3, #6
 8002222:	2200      	movs	r2, #0
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	617a      	str	r2, [r7, #20]
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800222e:	f04f 0b00 	mov.w	fp, #0
 8002232:	4652      	mov	r2, sl
 8002234:	465b      	mov	r3, fp
 8002236:	f04f 0000 	mov.w	r0, #0
 800223a:	f04f 0100 	mov.w	r1, #0
 800223e:	0159      	lsls	r1, r3, #5
 8002240:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002244:	0150      	lsls	r0, r2, #5
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	ebb2 080a 	subs.w	r8, r2, sl
 800224e:	eb63 090b 	sbc.w	r9, r3, fp
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800225e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002262:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002266:	ebb2 0408 	subs.w	r4, r2, r8
 800226a:	eb63 0509 	sbc.w	r5, r3, r9
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	00eb      	lsls	r3, r5, #3
 8002278:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800227c:	00e2      	lsls	r2, r4, #3
 800227e:	4614      	mov	r4, r2
 8002280:	461d      	mov	r5, r3
 8002282:	eb14 030a 	adds.w	r3, r4, sl
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	eb45 030b 	adc.w	r3, r5, fp
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	e9d7 4500 	ldrd	r4, r5, [r7]
 800229a:	4629      	mov	r1, r5
 800229c:	028b      	lsls	r3, r1, #10
 800229e:	4621      	mov	r1, r4
 80022a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022a4:	4621      	mov	r1, r4
 80022a6:	028a      	lsls	r2, r1, #10
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ae:	2200      	movs	r2, #0
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	60fa      	str	r2, [r7, #12]
 80022b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022b8:	f7fd ffaa 	bl	8000210 <__aeabi_uldivmod>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4613      	mov	r3, r2
 80022c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	0c1b      	lsrs	r3, r3, #16
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	3301      	adds	r3, #1
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80022d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022de:	e002      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80022e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3740      	adds	r7, #64	; 0x40
 80022ec:	46bd      	mov	sp, r7
 80022ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800
 80022f8:	00f42400 	.word	0x00f42400
 80022fc:	017d7840 	.word	0x017d7840

08002300 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_RCC_GetHCLKFreq+0x14>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000000 	.word	0x20000000

08002318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800231c:	f7ff fff0 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002320:	4602      	mov	r2, r0
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	0a9b      	lsrs	r3, r3, #10
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4903      	ldr	r1, [pc, #12]	; (800233c <HAL_RCC_GetPCLK1Freq+0x24>)
 800232e:	5ccb      	ldrb	r3, [r1, r3]
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40023800 	.word	0x40023800
 800233c:	08005078 	.word	0x08005078

08002340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002344:	f7ff ffdc 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002348:	4602      	mov	r2, r0
 800234a:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	0b5b      	lsrs	r3, r3, #13
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	4903      	ldr	r1, [pc, #12]	; (8002364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002356:	5ccb      	ldrb	r3, [r1, r3]
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800235c:	4618      	mov	r0, r3
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40023800 	.word	0x40023800
 8002364:	08005078 	.word	0x08005078

08002368 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	220f      	movs	r2, #15
 8002376:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002378:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <HAL_RCC_GetClockConfig+0x5c>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 0203 	and.w	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002384:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <HAL_RCC_GetClockConfig+0x5c>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	08db      	lsrs	r3, r3, #3
 80023a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023aa:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <HAL_RCC_GetClockConfig+0x60>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 020f 	and.w	r2, r3, #15
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	601a      	str	r2, [r3, #0]
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40023c00 	.word	0x40023c00

080023cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d012      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023f4:	4b69      	ldr	r3, [pc, #420]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4a68      	ldr	r2, [pc, #416]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023fe:	6093      	str	r3, [r2, #8]
 8002400:	4b66      	ldr	r3, [pc, #408]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002408:	4964      	ldr	r1, [pc, #400]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002416:	2301      	movs	r3, #1
 8002418:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d017      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002426:	4b5d      	ldr	r3, [pc, #372]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800242c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002434:	4959      	ldr	r1, [pc, #356]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002440:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002444:	d101      	bne.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002446:	2301      	movs	r3, #1
 8002448:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002452:	2301      	movs	r3, #1
 8002454:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d017      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002462:	4b4e      	ldr	r3, [pc, #312]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002468:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	494a      	ldr	r1, [pc, #296]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002480:	d101      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002482:	2301      	movs	r3, #1
 8002484:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800248e:	2301      	movs	r3, #1
 8002490:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800249e:	2301      	movs	r3, #1
 80024a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0320 	and.w	r3, r3, #32
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 808b 	beq.w	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024b0:	4b3a      	ldr	r3, [pc, #232]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	4a39      	ldr	r2, [pc, #228]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ba:	6413      	str	r3, [r2, #64]	; 0x40
 80024bc:	4b37      	ldr	r3, [pc, #220]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024c8:	4b35      	ldr	r3, [pc, #212]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a34      	ldr	r2, [pc, #208]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d4:	f7fe ff88 	bl	80013e8 <HAL_GetTick>
 80024d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024dc:	f7fe ff84 	bl	80013e8 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	; 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e357      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024ee:	4b2c      	ldr	r3, [pc, #176]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024fa:	4b28      	ldr	r3, [pc, #160]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002502:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d035      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	429a      	cmp	r2, r3
 8002516:	d02e      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002518:	4b20      	ldr	r3, [pc, #128]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800251a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002520:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002522:	4b1e      	ldr	r3, [pc, #120]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002526:	4a1d      	ldr	r2, [pc, #116]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800252e:	4b1b      	ldr	r3, [pc, #108]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	4a1a      	ldr	r2, [pc, #104]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002538:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800253a:	4a18      	ldr	r2, [pc, #96]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002540:	4b16      	ldr	r3, [pc, #88]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b01      	cmp	r3, #1
 800254a:	d114      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7fe ff4c 	bl	80013e8 <HAL_GetTick>
 8002550:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002552:	e00a      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002554:	f7fe ff48 	bl	80013e8 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e319      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0ee      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002582:	d111      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002592:	400b      	ands	r3, r1
 8002594:	4901      	ldr	r1, [pc, #4]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002596:	4313      	orrs	r3, r2
 8002598:	608b      	str	r3, [r1, #8]
 800259a:	e00b      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800259c:	40023800 	.word	0x40023800
 80025a0:	40007000 	.word	0x40007000
 80025a4:	0ffffcff 	.word	0x0ffffcff
 80025a8:	4baa      	ldr	r3, [pc, #680]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4aa9      	ldr	r2, [pc, #676]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80025b2:	6093      	str	r3, [r2, #8]
 80025b4:	4ba7      	ldr	r3, [pc, #668]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c0:	49a4      	ldr	r1, [pc, #656]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d010      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80025d2:	4ba0      	ldr	r3, [pc, #640]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025d8:	4a9e      	ldr	r2, [pc, #632]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80025e2:	4b9c      	ldr	r3, [pc, #624]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ec:	4999      	ldr	r1, [pc, #612]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00a      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002600:	4b94      	ldr	r3, [pc, #592]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002606:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800260e:	4991      	ldr	r1, [pc, #580]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002622:	4b8c      	ldr	r3, [pc, #560]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002628:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002630:	4988      	ldr	r1, [pc, #544]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002644:	4b83      	ldr	r3, [pc, #524]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002652:	4980      	ldr	r1, [pc, #512]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002666:	4b7b      	ldr	r3, [pc, #492]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	4977      	ldr	r1, [pc, #476]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00a      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002688:	4b72      	ldr	r3, [pc, #456]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268e:	f023 0203 	bic.w	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	496f      	ldr	r1, [pc, #444]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026aa:	4b6a      	ldr	r3, [pc, #424]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b0:	f023 020c 	bic.w	r2, r3, #12
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b8:	4966      	ldr	r1, [pc, #408]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026cc:	4b61      	ldr	r3, [pc, #388]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026da:	495e      	ldr	r1, [pc, #376]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026ee:	4b59      	ldr	r3, [pc, #356]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026fc:	4955      	ldr	r1, [pc, #340]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002710:	4b50      	ldr	r3, [pc, #320]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002716:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271e:	494d      	ldr	r1, [pc, #308]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002732:	4b48      	ldr	r3, [pc, #288]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002738:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002740:	4944      	ldr	r1, [pc, #272]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002754:	4b3f      	ldr	r3, [pc, #252]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002762:	493c      	ldr	r1, [pc, #240]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002776:	4b37      	ldr	r3, [pc, #220]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002784:	4933      	ldr	r1, [pc, #204]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002798:	4b2e      	ldr	r3, [pc, #184]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027a6:	492b      	ldr	r1, [pc, #172]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d011      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027ba:	4b26      	ldr	r3, [pc, #152]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027c8:	4922      	ldr	r1, [pc, #136]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027d8:	d101      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80027da:	2301      	movs	r3, #1
 80027dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80027ea:	2301      	movs	r3, #1
 80027ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027fa:	4b16      	ldr	r3, [pc, #88]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002800:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002808:	4912      	ldr	r1, [pc, #72]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00b      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800281e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002822:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800282c:	4909      	ldr	r1, [pc, #36]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d006      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 80d9 	beq.w	80029fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002848:	4b02      	ldr	r3, [pc, #8]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a01      	ldr	r2, [pc, #4]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800284e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002852:	e001      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002854:	40023800 	.word	0x40023800
 8002858:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800285a:	f7fe fdc5 	bl	80013e8 <HAL_GetTick>
 800285e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002860:	e008      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002862:	f7fe fdc1 	bl	80013e8 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b64      	cmp	r3, #100	; 0x64
 800286e:	d901      	bls.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e194      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002874:	4b6c      	ldr	r3, [pc, #432]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f0      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d021      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002890:	2b00      	cmp	r3, #0
 8002892:	d11d      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002894:	4b64      	ldr	r3, [pc, #400]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800289a:	0c1b      	lsrs	r3, r3, #16
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028a2:	4b61      	ldr	r3, [pc, #388]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028a8:	0e1b      	lsrs	r3, r3, #24
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	019a      	lsls	r2, r3, #6
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	041b      	lsls	r3, r3, #16
 80028ba:	431a      	orrs	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	061b      	lsls	r3, r3, #24
 80028c0:	431a      	orrs	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	071b      	lsls	r3, r3, #28
 80028c8:	4957      	ldr	r1, [pc, #348]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d004      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028e4:	d00a      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d02e      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028fa:	d129      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028fc:	4b4a      	ldr	r3, [pc, #296]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002902:	0c1b      	lsrs	r3, r3, #16
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800290a:	4b47      	ldr	r3, [pc, #284]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800290c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002910:	0f1b      	lsrs	r3, r3, #28
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	019a      	lsls	r2, r3, #6
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	041b      	lsls	r3, r3, #16
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	061b      	lsls	r3, r3, #24
 800292a:	431a      	orrs	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	071b      	lsls	r3, r3, #28
 8002930:	493d      	ldr	r1, [pc, #244]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002938:	4b3b      	ldr	r3, [pc, #236]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800293a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800293e:	f023 021f 	bic.w	r2, r3, #31
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	3b01      	subs	r3, #1
 8002948:	4937      	ldr	r1, [pc, #220]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d01d      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800295c:	4b32      	ldr	r3, [pc, #200]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800295e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002962:	0e1b      	lsrs	r3, r3, #24
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800296a:	4b2f      	ldr	r3, [pc, #188]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800296c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002970:	0f1b      	lsrs	r3, r3, #28
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	019a      	lsls	r2, r3, #6
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	041b      	lsls	r3, r3, #16
 8002984:	431a      	orrs	r2, r3
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	061b      	lsls	r3, r3, #24
 800298a:	431a      	orrs	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	071b      	lsls	r3, r3, #28
 8002990:	4925      	ldr	r1, [pc, #148]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d011      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	019a      	lsls	r2, r3, #6
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	041b      	lsls	r3, r3, #16
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	061b      	lsls	r3, r3, #24
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	071b      	lsls	r3, r3, #28
 80029c0:	4919      	ldr	r1, [pc, #100]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029c8:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a16      	ldr	r2, [pc, #88]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d4:	f7fe fd08 	bl	80013e8 <HAL_GetTick>
 80029d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029dc:	f7fe fd04 	bl	80013e8 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	; 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e0d7      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029ee:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	f040 80cd 	bne.w	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a08      	ldr	r2, [pc, #32]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a0e:	f7fe fceb 	bl	80013e8 <HAL_GetTick>
 8002a12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a14:	e00a      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a16:	f7fe fce7 	bl	80013e8 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b64      	cmp	r3, #100	; 0x64
 8002a22:	d903      	bls.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e0ba      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002a28:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a2c:	4b5e      	ldr	r3, [pc, #376]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a38:	d0ed      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d02e      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d12a      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a62:	4b51      	ldr	r3, [pc, #324]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a68:	0c1b      	lsrs	r3, r3, #16
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a70:	4b4d      	ldr	r3, [pc, #308]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a76:	0f1b      	lsrs	r3, r3, #28
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	019a      	lsls	r2, r3, #6
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	041b      	lsls	r3, r3, #16
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	061b      	lsls	r3, r3, #24
 8002a90:	431a      	orrs	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	071b      	lsls	r3, r3, #28
 8002a96:	4944      	ldr	r1, [pc, #272]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a9e:	4b42      	ldr	r3, [pc, #264]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aa4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	3b01      	subs	r3, #1
 8002aae:	021b      	lsls	r3, r3, #8
 8002ab0:	493d      	ldr	r1, [pc, #244]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d022      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ac8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002acc:	d11d      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ace:	4b36      	ldr	r3, [pc, #216]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad4:	0e1b      	lsrs	r3, r3, #24
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002adc:	4b32      	ldr	r3, [pc, #200]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae2:	0f1b      	lsrs	r3, r3, #28
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	019a      	lsls	r2, r3, #6
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	041b      	lsls	r3, r3, #16
 8002af6:	431a      	orrs	r2, r3
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	061b      	lsls	r3, r3, #24
 8002afc:	431a      	orrs	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	071b      	lsls	r3, r3, #28
 8002b02:	4929      	ldr	r1, [pc, #164]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d028      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b16:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1c:	0e1b      	lsrs	r3, r3, #24
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b24:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2a:	0c1b      	lsrs	r3, r3, #16
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	019a      	lsls	r2, r3, #6
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	041b      	lsls	r3, r3, #16
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	061b      	lsls	r3, r3, #24
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	071b      	lsls	r3, r3, #28
 8002b4a:	4917      	ldr	r1, [pc, #92]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b52:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	4911      	ldr	r1, [pc, #68]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a0e      	ldr	r2, [pc, #56]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b74:	f7fe fc38 	bl	80013e8 <HAL_GetTick>
 8002b78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b7c:	f7fe fc34 	bl	80013e8 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b64      	cmp	r3, #100	; 0x64
 8002b88:	d901      	bls.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e007      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b8e:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b9a:	d1ef      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3720      	adds	r7, #32
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800

08002bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e049      	b.n	8002c52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f841 	bl	8002c5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3304      	adds	r3, #4
 8002be8:	4619      	mov	r1, r3
 8002bea:	4610      	mov	r0, r2
 8002bec:	f000 fa00 	bl	8002ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d001      	beq.n	8002c88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e054      	b.n	8002d32 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0201 	orr.w	r2, r2, #1
 8002c9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a26      	ldr	r2, [pc, #152]	; (8002d40 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d022      	beq.n	8002cf0 <HAL_TIM_Base_Start_IT+0x80>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb2:	d01d      	beq.n	8002cf0 <HAL_TIM_Base_Start_IT+0x80>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a22      	ldr	r2, [pc, #136]	; (8002d44 <HAL_TIM_Base_Start_IT+0xd4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d018      	beq.n	8002cf0 <HAL_TIM_Base_Start_IT+0x80>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a21      	ldr	r2, [pc, #132]	; (8002d48 <HAL_TIM_Base_Start_IT+0xd8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d013      	beq.n	8002cf0 <HAL_TIM_Base_Start_IT+0x80>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1f      	ldr	r2, [pc, #124]	; (8002d4c <HAL_TIM_Base_Start_IT+0xdc>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00e      	beq.n	8002cf0 <HAL_TIM_Base_Start_IT+0x80>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1e      	ldr	r2, [pc, #120]	; (8002d50 <HAL_TIM_Base_Start_IT+0xe0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d009      	beq.n	8002cf0 <HAL_TIM_Base_Start_IT+0x80>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a1c      	ldr	r2, [pc, #112]	; (8002d54 <HAL_TIM_Base_Start_IT+0xe4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d004      	beq.n	8002cf0 <HAL_TIM_Base_Start_IT+0x80>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a1b      	ldr	r2, [pc, #108]	; (8002d58 <HAL_TIM_Base_Start_IT+0xe8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d115      	bne.n	8002d1c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <HAL_TIM_Base_Start_IT+0xec>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b06      	cmp	r3, #6
 8002d00:	d015      	beq.n	8002d2e <HAL_TIM_Base_Start_IT+0xbe>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d08:	d011      	beq.n	8002d2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0201 	orr.w	r2, r2, #1
 8002d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d1a:	e008      	b.n	8002d2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	e000      	b.n	8002d30 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40010000 	.word	0x40010000
 8002d44:	40000400 	.word	0x40000400
 8002d48:	40000800 	.word	0x40000800
 8002d4c:	40000c00 	.word	0x40000c00
 8002d50:	40010400 	.word	0x40010400
 8002d54:	40014000 	.word	0x40014000
 8002d58:	40001800 	.word	0x40001800
 8002d5c:	00010007 	.word	0x00010007

08002d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d122      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d11b      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0202 	mvn.w	r2, #2
 8002d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f905 	bl	8002fb2 <HAL_TIM_IC_CaptureCallback>
 8002da8:	e005      	b.n	8002db6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f8f7 	bl	8002f9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f908 	bl	8002fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d122      	bne.n	8002e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d11b      	bne.n	8002e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0204 	mvn.w	r2, #4
 8002de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2202      	movs	r2, #2
 8002de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f8db 	bl	8002fb2 <HAL_TIM_IC_CaptureCallback>
 8002dfc:	e005      	b.n	8002e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f8cd 	bl	8002f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f8de 	bl	8002fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d122      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d11b      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0208 	mvn.w	r2, #8
 8002e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2204      	movs	r2, #4
 8002e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f8b1 	bl	8002fb2 <HAL_TIM_IC_CaptureCallback>
 8002e50:	e005      	b.n	8002e5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f8a3 	bl	8002f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f8b4 	bl	8002fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	2b10      	cmp	r3, #16
 8002e70:	d122      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b10      	cmp	r3, #16
 8002e7e:	d11b      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0210 	mvn.w	r2, #16
 8002e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2208      	movs	r2, #8
 8002e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f887 	bl	8002fb2 <HAL_TIM_IC_CaptureCallback>
 8002ea4:	e005      	b.n	8002eb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f879 	bl	8002f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f88a 	bl	8002fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d10e      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d107      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f06f 0201 	mvn.w	r2, #1
 8002edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fe f89a 	bl	8001018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eee:	2b80      	cmp	r3, #128	; 0x80
 8002ef0:	d10e      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efc:	2b80      	cmp	r3, #128	; 0x80
 8002efe:	d107      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f91a 	bl	8003144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f1e:	d10e      	bne.n	8002f3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2a:	2b80      	cmp	r3, #128	; 0x80
 8002f2c:	d107      	bne.n	8002f3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f90d 	bl	8003158 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f48:	2b40      	cmp	r3, #64	; 0x40
 8002f4a:	d10e      	bne.n	8002f6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f56:	2b40      	cmp	r3, #64	; 0x40
 8002f58:	d107      	bne.n	8002f6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f838 	bl	8002fda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	f003 0320 	and.w	r3, r3, #32
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d10e      	bne.n	8002f96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	d107      	bne.n	8002f96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f06f 0220 	mvn.w	r2, #32
 8002f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f8cd 	bl	8003130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a40      	ldr	r2, [pc, #256]	; (8003104 <TIM_Base_SetConfig+0x114>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d013      	beq.n	8003030 <TIM_Base_SetConfig+0x40>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300e:	d00f      	beq.n	8003030 <TIM_Base_SetConfig+0x40>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a3d      	ldr	r2, [pc, #244]	; (8003108 <TIM_Base_SetConfig+0x118>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00b      	beq.n	8003030 <TIM_Base_SetConfig+0x40>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a3c      	ldr	r2, [pc, #240]	; (800310c <TIM_Base_SetConfig+0x11c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d007      	beq.n	8003030 <TIM_Base_SetConfig+0x40>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a3b      	ldr	r2, [pc, #236]	; (8003110 <TIM_Base_SetConfig+0x120>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d003      	beq.n	8003030 <TIM_Base_SetConfig+0x40>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a3a      	ldr	r2, [pc, #232]	; (8003114 <TIM_Base_SetConfig+0x124>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d108      	bne.n	8003042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4313      	orrs	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a2f      	ldr	r2, [pc, #188]	; (8003104 <TIM_Base_SetConfig+0x114>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d02b      	beq.n	80030a2 <TIM_Base_SetConfig+0xb2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003050:	d027      	beq.n	80030a2 <TIM_Base_SetConfig+0xb2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a2c      	ldr	r2, [pc, #176]	; (8003108 <TIM_Base_SetConfig+0x118>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d023      	beq.n	80030a2 <TIM_Base_SetConfig+0xb2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a2b      	ldr	r2, [pc, #172]	; (800310c <TIM_Base_SetConfig+0x11c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d01f      	beq.n	80030a2 <TIM_Base_SetConfig+0xb2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a2a      	ldr	r2, [pc, #168]	; (8003110 <TIM_Base_SetConfig+0x120>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d01b      	beq.n	80030a2 <TIM_Base_SetConfig+0xb2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a29      	ldr	r2, [pc, #164]	; (8003114 <TIM_Base_SetConfig+0x124>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d017      	beq.n	80030a2 <TIM_Base_SetConfig+0xb2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a28      	ldr	r2, [pc, #160]	; (8003118 <TIM_Base_SetConfig+0x128>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d013      	beq.n	80030a2 <TIM_Base_SetConfig+0xb2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a27      	ldr	r2, [pc, #156]	; (800311c <TIM_Base_SetConfig+0x12c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d00f      	beq.n	80030a2 <TIM_Base_SetConfig+0xb2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a26      	ldr	r2, [pc, #152]	; (8003120 <TIM_Base_SetConfig+0x130>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00b      	beq.n	80030a2 <TIM_Base_SetConfig+0xb2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a25      	ldr	r2, [pc, #148]	; (8003124 <TIM_Base_SetConfig+0x134>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d007      	beq.n	80030a2 <TIM_Base_SetConfig+0xb2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a24      	ldr	r2, [pc, #144]	; (8003128 <TIM_Base_SetConfig+0x138>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d003      	beq.n	80030a2 <TIM_Base_SetConfig+0xb2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a23      	ldr	r2, [pc, #140]	; (800312c <TIM_Base_SetConfig+0x13c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d108      	bne.n	80030b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a0a      	ldr	r2, [pc, #40]	; (8003104 <TIM_Base_SetConfig+0x114>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d003      	beq.n	80030e8 <TIM_Base_SetConfig+0xf8>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a0c      	ldr	r2, [pc, #48]	; (8003114 <TIM_Base_SetConfig+0x124>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d103      	bne.n	80030f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	615a      	str	r2, [r3, #20]
}
 80030f6:	bf00      	nop
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40010000 	.word	0x40010000
 8003108:	40000400 	.word	0x40000400
 800310c:	40000800 	.word	0x40000800
 8003110:	40000c00 	.word	0x40000c00
 8003114:	40010400 	.word	0x40010400
 8003118:	40014000 	.word	0x40014000
 800311c:	40014400 	.word	0x40014400
 8003120:	40014800 	.word	0x40014800
 8003124:	40001800 	.word	0x40001800
 8003128:	40001c00 	.word	0x40001c00
 800312c:	40002000 	.word	0x40002000

08003130 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e040      	b.n	8003200 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d106      	bne.n	8003194 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fe f85e 	bl	8001250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2224      	movs	r2, #36	; 0x24
 8003198:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0201 	bic.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f8b0 	bl	8003310 <UART_SetConfig>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e022      	b.n	8003200 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fb08 	bl	80037d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 fb8f 	bl	800391c <UART_CheckIdleState>
 80031fe:	4603      	mov	r3, r0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08a      	sub	sp, #40	; 0x28
 800320c:	af02      	add	r7, sp, #8
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	4613      	mov	r3, r2
 8003216:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800321c:	2b20      	cmp	r3, #32
 800321e:	d171      	bne.n	8003304 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_UART_Transmit+0x24>
 8003226:	88fb      	ldrh	r3, [r7, #6]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e06a      	b.n	8003306 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2221      	movs	r2, #33	; 0x21
 800323c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800323e:	f7fe f8d3 	bl	80013e8 <HAL_GetTick>
 8003242:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	88fa      	ldrh	r2, [r7, #6]
 8003248:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	88fa      	ldrh	r2, [r7, #6]
 8003250:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325c:	d108      	bne.n	8003270 <HAL_UART_Transmit+0x68>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d104      	bne.n	8003270 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	e003      	b.n	8003278 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003274:	2300      	movs	r3, #0
 8003276:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003278:	e02c      	b.n	80032d4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2200      	movs	r2, #0
 8003282:	2180      	movs	r1, #128	; 0x80
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 fb80 	bl	800398a <UART_WaitOnFlagUntilTimeout>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e038      	b.n	8003306 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10b      	bne.n	80032b2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	3302      	adds	r3, #2
 80032ae:	61bb      	str	r3, [r7, #24]
 80032b0:	e007      	b.n	80032c2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	781a      	ldrb	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	3301      	adds	r3, #1
 80032c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032da:	b29b      	uxth	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1cc      	bne.n	800327a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	2200      	movs	r2, #0
 80032e8:	2140      	movs	r1, #64	; 0x40
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 fb4d 	bl	800398a <UART_WaitOnFlagUntilTimeout>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e005      	b.n	8003306 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	e000      	b.n	8003306 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003304:	2302      	movs	r3, #2
  }
}
 8003306:	4618      	mov	r0, r3
 8003308:	3720      	adds	r7, #32
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	4ba6      	ldr	r3, [pc, #664]	; (80035d4 <UART_SetConfig+0x2c4>)
 800333c:	4013      	ands	r3, r2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6812      	ldr	r2, [r2, #0]
 8003342:	6979      	ldr	r1, [r7, #20]
 8003344:	430b      	orrs	r3, r1
 8003346:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	430a      	orrs	r2, r1
 8003380:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a94      	ldr	r2, [pc, #592]	; (80035d8 <UART_SetConfig+0x2c8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d120      	bne.n	80033ce <UART_SetConfig+0xbe>
 800338c:	4b93      	ldr	r3, [pc, #588]	; (80035dc <UART_SetConfig+0x2cc>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	2b03      	cmp	r3, #3
 8003398:	d816      	bhi.n	80033c8 <UART_SetConfig+0xb8>
 800339a:	a201      	add	r2, pc, #4	; (adr r2, 80033a0 <UART_SetConfig+0x90>)
 800339c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a0:	080033b1 	.word	0x080033b1
 80033a4:	080033bd 	.word	0x080033bd
 80033a8:	080033b7 	.word	0x080033b7
 80033ac:	080033c3 	.word	0x080033c3
 80033b0:	2301      	movs	r3, #1
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	e150      	b.n	8003658 <UART_SetConfig+0x348>
 80033b6:	2302      	movs	r3, #2
 80033b8:	77fb      	strb	r3, [r7, #31]
 80033ba:	e14d      	b.n	8003658 <UART_SetConfig+0x348>
 80033bc:	2304      	movs	r3, #4
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	e14a      	b.n	8003658 <UART_SetConfig+0x348>
 80033c2:	2308      	movs	r3, #8
 80033c4:	77fb      	strb	r3, [r7, #31]
 80033c6:	e147      	b.n	8003658 <UART_SetConfig+0x348>
 80033c8:	2310      	movs	r3, #16
 80033ca:	77fb      	strb	r3, [r7, #31]
 80033cc:	e144      	b.n	8003658 <UART_SetConfig+0x348>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a83      	ldr	r2, [pc, #524]	; (80035e0 <UART_SetConfig+0x2d0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d132      	bne.n	800343e <UART_SetConfig+0x12e>
 80033d8:	4b80      	ldr	r3, [pc, #512]	; (80035dc <UART_SetConfig+0x2cc>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b0c      	cmp	r3, #12
 80033e4:	d828      	bhi.n	8003438 <UART_SetConfig+0x128>
 80033e6:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <UART_SetConfig+0xdc>)
 80033e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ec:	08003421 	.word	0x08003421
 80033f0:	08003439 	.word	0x08003439
 80033f4:	08003439 	.word	0x08003439
 80033f8:	08003439 	.word	0x08003439
 80033fc:	0800342d 	.word	0x0800342d
 8003400:	08003439 	.word	0x08003439
 8003404:	08003439 	.word	0x08003439
 8003408:	08003439 	.word	0x08003439
 800340c:	08003427 	.word	0x08003427
 8003410:	08003439 	.word	0x08003439
 8003414:	08003439 	.word	0x08003439
 8003418:	08003439 	.word	0x08003439
 800341c:	08003433 	.word	0x08003433
 8003420:	2300      	movs	r3, #0
 8003422:	77fb      	strb	r3, [r7, #31]
 8003424:	e118      	b.n	8003658 <UART_SetConfig+0x348>
 8003426:	2302      	movs	r3, #2
 8003428:	77fb      	strb	r3, [r7, #31]
 800342a:	e115      	b.n	8003658 <UART_SetConfig+0x348>
 800342c:	2304      	movs	r3, #4
 800342e:	77fb      	strb	r3, [r7, #31]
 8003430:	e112      	b.n	8003658 <UART_SetConfig+0x348>
 8003432:	2308      	movs	r3, #8
 8003434:	77fb      	strb	r3, [r7, #31]
 8003436:	e10f      	b.n	8003658 <UART_SetConfig+0x348>
 8003438:	2310      	movs	r3, #16
 800343a:	77fb      	strb	r3, [r7, #31]
 800343c:	e10c      	b.n	8003658 <UART_SetConfig+0x348>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a68      	ldr	r2, [pc, #416]	; (80035e4 <UART_SetConfig+0x2d4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d120      	bne.n	800348a <UART_SetConfig+0x17a>
 8003448:	4b64      	ldr	r3, [pc, #400]	; (80035dc <UART_SetConfig+0x2cc>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003452:	2b30      	cmp	r3, #48	; 0x30
 8003454:	d013      	beq.n	800347e <UART_SetConfig+0x16e>
 8003456:	2b30      	cmp	r3, #48	; 0x30
 8003458:	d814      	bhi.n	8003484 <UART_SetConfig+0x174>
 800345a:	2b20      	cmp	r3, #32
 800345c:	d009      	beq.n	8003472 <UART_SetConfig+0x162>
 800345e:	2b20      	cmp	r3, #32
 8003460:	d810      	bhi.n	8003484 <UART_SetConfig+0x174>
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <UART_SetConfig+0x15c>
 8003466:	2b10      	cmp	r3, #16
 8003468:	d006      	beq.n	8003478 <UART_SetConfig+0x168>
 800346a:	e00b      	b.n	8003484 <UART_SetConfig+0x174>
 800346c:	2300      	movs	r3, #0
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	e0f2      	b.n	8003658 <UART_SetConfig+0x348>
 8003472:	2302      	movs	r3, #2
 8003474:	77fb      	strb	r3, [r7, #31]
 8003476:	e0ef      	b.n	8003658 <UART_SetConfig+0x348>
 8003478:	2304      	movs	r3, #4
 800347a:	77fb      	strb	r3, [r7, #31]
 800347c:	e0ec      	b.n	8003658 <UART_SetConfig+0x348>
 800347e:	2308      	movs	r3, #8
 8003480:	77fb      	strb	r3, [r7, #31]
 8003482:	e0e9      	b.n	8003658 <UART_SetConfig+0x348>
 8003484:	2310      	movs	r3, #16
 8003486:	77fb      	strb	r3, [r7, #31]
 8003488:	e0e6      	b.n	8003658 <UART_SetConfig+0x348>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a56      	ldr	r2, [pc, #344]	; (80035e8 <UART_SetConfig+0x2d8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d120      	bne.n	80034d6 <UART_SetConfig+0x1c6>
 8003494:	4b51      	ldr	r3, [pc, #324]	; (80035dc <UART_SetConfig+0x2cc>)
 8003496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800349e:	2bc0      	cmp	r3, #192	; 0xc0
 80034a0:	d013      	beq.n	80034ca <UART_SetConfig+0x1ba>
 80034a2:	2bc0      	cmp	r3, #192	; 0xc0
 80034a4:	d814      	bhi.n	80034d0 <UART_SetConfig+0x1c0>
 80034a6:	2b80      	cmp	r3, #128	; 0x80
 80034a8:	d009      	beq.n	80034be <UART_SetConfig+0x1ae>
 80034aa:	2b80      	cmp	r3, #128	; 0x80
 80034ac:	d810      	bhi.n	80034d0 <UART_SetConfig+0x1c0>
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <UART_SetConfig+0x1a8>
 80034b2:	2b40      	cmp	r3, #64	; 0x40
 80034b4:	d006      	beq.n	80034c4 <UART_SetConfig+0x1b4>
 80034b6:	e00b      	b.n	80034d0 <UART_SetConfig+0x1c0>
 80034b8:	2300      	movs	r3, #0
 80034ba:	77fb      	strb	r3, [r7, #31]
 80034bc:	e0cc      	b.n	8003658 <UART_SetConfig+0x348>
 80034be:	2302      	movs	r3, #2
 80034c0:	77fb      	strb	r3, [r7, #31]
 80034c2:	e0c9      	b.n	8003658 <UART_SetConfig+0x348>
 80034c4:	2304      	movs	r3, #4
 80034c6:	77fb      	strb	r3, [r7, #31]
 80034c8:	e0c6      	b.n	8003658 <UART_SetConfig+0x348>
 80034ca:	2308      	movs	r3, #8
 80034cc:	77fb      	strb	r3, [r7, #31]
 80034ce:	e0c3      	b.n	8003658 <UART_SetConfig+0x348>
 80034d0:	2310      	movs	r3, #16
 80034d2:	77fb      	strb	r3, [r7, #31]
 80034d4:	e0c0      	b.n	8003658 <UART_SetConfig+0x348>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a44      	ldr	r2, [pc, #272]	; (80035ec <UART_SetConfig+0x2dc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d125      	bne.n	800352c <UART_SetConfig+0x21c>
 80034e0:	4b3e      	ldr	r3, [pc, #248]	; (80035dc <UART_SetConfig+0x2cc>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ee:	d017      	beq.n	8003520 <UART_SetConfig+0x210>
 80034f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034f4:	d817      	bhi.n	8003526 <UART_SetConfig+0x216>
 80034f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034fa:	d00b      	beq.n	8003514 <UART_SetConfig+0x204>
 80034fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003500:	d811      	bhi.n	8003526 <UART_SetConfig+0x216>
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <UART_SetConfig+0x1fe>
 8003506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800350a:	d006      	beq.n	800351a <UART_SetConfig+0x20a>
 800350c:	e00b      	b.n	8003526 <UART_SetConfig+0x216>
 800350e:	2300      	movs	r3, #0
 8003510:	77fb      	strb	r3, [r7, #31]
 8003512:	e0a1      	b.n	8003658 <UART_SetConfig+0x348>
 8003514:	2302      	movs	r3, #2
 8003516:	77fb      	strb	r3, [r7, #31]
 8003518:	e09e      	b.n	8003658 <UART_SetConfig+0x348>
 800351a:	2304      	movs	r3, #4
 800351c:	77fb      	strb	r3, [r7, #31]
 800351e:	e09b      	b.n	8003658 <UART_SetConfig+0x348>
 8003520:	2308      	movs	r3, #8
 8003522:	77fb      	strb	r3, [r7, #31]
 8003524:	e098      	b.n	8003658 <UART_SetConfig+0x348>
 8003526:	2310      	movs	r3, #16
 8003528:	77fb      	strb	r3, [r7, #31]
 800352a:	e095      	b.n	8003658 <UART_SetConfig+0x348>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a2f      	ldr	r2, [pc, #188]	; (80035f0 <UART_SetConfig+0x2e0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d125      	bne.n	8003582 <UART_SetConfig+0x272>
 8003536:	4b29      	ldr	r3, [pc, #164]	; (80035dc <UART_SetConfig+0x2cc>)
 8003538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003540:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003544:	d017      	beq.n	8003576 <UART_SetConfig+0x266>
 8003546:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800354a:	d817      	bhi.n	800357c <UART_SetConfig+0x26c>
 800354c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003550:	d00b      	beq.n	800356a <UART_SetConfig+0x25a>
 8003552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003556:	d811      	bhi.n	800357c <UART_SetConfig+0x26c>
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <UART_SetConfig+0x254>
 800355c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003560:	d006      	beq.n	8003570 <UART_SetConfig+0x260>
 8003562:	e00b      	b.n	800357c <UART_SetConfig+0x26c>
 8003564:	2301      	movs	r3, #1
 8003566:	77fb      	strb	r3, [r7, #31]
 8003568:	e076      	b.n	8003658 <UART_SetConfig+0x348>
 800356a:	2302      	movs	r3, #2
 800356c:	77fb      	strb	r3, [r7, #31]
 800356e:	e073      	b.n	8003658 <UART_SetConfig+0x348>
 8003570:	2304      	movs	r3, #4
 8003572:	77fb      	strb	r3, [r7, #31]
 8003574:	e070      	b.n	8003658 <UART_SetConfig+0x348>
 8003576:	2308      	movs	r3, #8
 8003578:	77fb      	strb	r3, [r7, #31]
 800357a:	e06d      	b.n	8003658 <UART_SetConfig+0x348>
 800357c:	2310      	movs	r3, #16
 800357e:	77fb      	strb	r3, [r7, #31]
 8003580:	e06a      	b.n	8003658 <UART_SetConfig+0x348>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1b      	ldr	r2, [pc, #108]	; (80035f4 <UART_SetConfig+0x2e4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d138      	bne.n	80035fe <UART_SetConfig+0x2ee>
 800358c:	4b13      	ldr	r3, [pc, #76]	; (80035dc <UART_SetConfig+0x2cc>)
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003592:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003596:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800359a:	d017      	beq.n	80035cc <UART_SetConfig+0x2bc>
 800359c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035a0:	d82a      	bhi.n	80035f8 <UART_SetConfig+0x2e8>
 80035a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035a6:	d00b      	beq.n	80035c0 <UART_SetConfig+0x2b0>
 80035a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ac:	d824      	bhi.n	80035f8 <UART_SetConfig+0x2e8>
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <UART_SetConfig+0x2aa>
 80035b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b6:	d006      	beq.n	80035c6 <UART_SetConfig+0x2b6>
 80035b8:	e01e      	b.n	80035f8 <UART_SetConfig+0x2e8>
 80035ba:	2300      	movs	r3, #0
 80035bc:	77fb      	strb	r3, [r7, #31]
 80035be:	e04b      	b.n	8003658 <UART_SetConfig+0x348>
 80035c0:	2302      	movs	r3, #2
 80035c2:	77fb      	strb	r3, [r7, #31]
 80035c4:	e048      	b.n	8003658 <UART_SetConfig+0x348>
 80035c6:	2304      	movs	r3, #4
 80035c8:	77fb      	strb	r3, [r7, #31]
 80035ca:	e045      	b.n	8003658 <UART_SetConfig+0x348>
 80035cc:	2308      	movs	r3, #8
 80035ce:	77fb      	strb	r3, [r7, #31]
 80035d0:	e042      	b.n	8003658 <UART_SetConfig+0x348>
 80035d2:	bf00      	nop
 80035d4:	efff69f3 	.word	0xefff69f3
 80035d8:	40011000 	.word	0x40011000
 80035dc:	40023800 	.word	0x40023800
 80035e0:	40004400 	.word	0x40004400
 80035e4:	40004800 	.word	0x40004800
 80035e8:	40004c00 	.word	0x40004c00
 80035ec:	40005000 	.word	0x40005000
 80035f0:	40011400 	.word	0x40011400
 80035f4:	40007800 	.word	0x40007800
 80035f8:	2310      	movs	r3, #16
 80035fa:	77fb      	strb	r3, [r7, #31]
 80035fc:	e02c      	b.n	8003658 <UART_SetConfig+0x348>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a72      	ldr	r2, [pc, #456]	; (80037cc <UART_SetConfig+0x4bc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d125      	bne.n	8003654 <UART_SetConfig+0x344>
 8003608:	4b71      	ldr	r3, [pc, #452]	; (80037d0 <UART_SetConfig+0x4c0>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003612:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003616:	d017      	beq.n	8003648 <UART_SetConfig+0x338>
 8003618:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800361c:	d817      	bhi.n	800364e <UART_SetConfig+0x33e>
 800361e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003622:	d00b      	beq.n	800363c <UART_SetConfig+0x32c>
 8003624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003628:	d811      	bhi.n	800364e <UART_SetConfig+0x33e>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <UART_SetConfig+0x326>
 800362e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003632:	d006      	beq.n	8003642 <UART_SetConfig+0x332>
 8003634:	e00b      	b.n	800364e <UART_SetConfig+0x33e>
 8003636:	2300      	movs	r3, #0
 8003638:	77fb      	strb	r3, [r7, #31]
 800363a:	e00d      	b.n	8003658 <UART_SetConfig+0x348>
 800363c:	2302      	movs	r3, #2
 800363e:	77fb      	strb	r3, [r7, #31]
 8003640:	e00a      	b.n	8003658 <UART_SetConfig+0x348>
 8003642:	2304      	movs	r3, #4
 8003644:	77fb      	strb	r3, [r7, #31]
 8003646:	e007      	b.n	8003658 <UART_SetConfig+0x348>
 8003648:	2308      	movs	r3, #8
 800364a:	77fb      	strb	r3, [r7, #31]
 800364c:	e004      	b.n	8003658 <UART_SetConfig+0x348>
 800364e:	2310      	movs	r3, #16
 8003650:	77fb      	strb	r3, [r7, #31]
 8003652:	e001      	b.n	8003658 <UART_SetConfig+0x348>
 8003654:	2310      	movs	r3, #16
 8003656:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003660:	d15b      	bne.n	800371a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003662:	7ffb      	ldrb	r3, [r7, #31]
 8003664:	2b08      	cmp	r3, #8
 8003666:	d828      	bhi.n	80036ba <UART_SetConfig+0x3aa>
 8003668:	a201      	add	r2, pc, #4	; (adr r2, 8003670 <UART_SetConfig+0x360>)
 800366a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366e:	bf00      	nop
 8003670:	08003695 	.word	0x08003695
 8003674:	0800369d 	.word	0x0800369d
 8003678:	080036a5 	.word	0x080036a5
 800367c:	080036bb 	.word	0x080036bb
 8003680:	080036ab 	.word	0x080036ab
 8003684:	080036bb 	.word	0x080036bb
 8003688:	080036bb 	.word	0x080036bb
 800368c:	080036bb 	.word	0x080036bb
 8003690:	080036b3 	.word	0x080036b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003694:	f7fe fe40 	bl	8002318 <HAL_RCC_GetPCLK1Freq>
 8003698:	61b8      	str	r0, [r7, #24]
        break;
 800369a:	e013      	b.n	80036c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800369c:	f7fe fe50 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 80036a0:	61b8      	str	r0, [r7, #24]
        break;
 80036a2:	e00f      	b.n	80036c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036a4:	4b4b      	ldr	r3, [pc, #300]	; (80037d4 <UART_SetConfig+0x4c4>)
 80036a6:	61bb      	str	r3, [r7, #24]
        break;
 80036a8:	e00c      	b.n	80036c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036aa:	f7fe fd63 	bl	8002174 <HAL_RCC_GetSysClockFreq>
 80036ae:	61b8      	str	r0, [r7, #24]
        break;
 80036b0:	e008      	b.n	80036c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036b6:	61bb      	str	r3, [r7, #24]
        break;
 80036b8:	e004      	b.n	80036c4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	77bb      	strb	r3, [r7, #30]
        break;
 80036c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d074      	beq.n	80037b4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	005a      	lsls	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	085b      	lsrs	r3, r3, #1
 80036d4:	441a      	add	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	fbb2 f3f3 	udiv	r3, r2, r3
 80036de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	2b0f      	cmp	r3, #15
 80036e4:	d916      	bls.n	8003714 <UART_SetConfig+0x404>
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ec:	d212      	bcs.n	8003714 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	f023 030f 	bic.w	r3, r3, #15
 80036f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	085b      	lsrs	r3, r3, #1
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	b29a      	uxth	r2, r3
 8003704:	89fb      	ldrh	r3, [r7, #14]
 8003706:	4313      	orrs	r3, r2
 8003708:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	89fa      	ldrh	r2, [r7, #14]
 8003710:	60da      	str	r2, [r3, #12]
 8003712:	e04f      	b.n	80037b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	77bb      	strb	r3, [r7, #30]
 8003718:	e04c      	b.n	80037b4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800371a:	7ffb      	ldrb	r3, [r7, #31]
 800371c:	2b08      	cmp	r3, #8
 800371e:	d828      	bhi.n	8003772 <UART_SetConfig+0x462>
 8003720:	a201      	add	r2, pc, #4	; (adr r2, 8003728 <UART_SetConfig+0x418>)
 8003722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003726:	bf00      	nop
 8003728:	0800374d 	.word	0x0800374d
 800372c:	08003755 	.word	0x08003755
 8003730:	0800375d 	.word	0x0800375d
 8003734:	08003773 	.word	0x08003773
 8003738:	08003763 	.word	0x08003763
 800373c:	08003773 	.word	0x08003773
 8003740:	08003773 	.word	0x08003773
 8003744:	08003773 	.word	0x08003773
 8003748:	0800376b 	.word	0x0800376b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800374c:	f7fe fde4 	bl	8002318 <HAL_RCC_GetPCLK1Freq>
 8003750:	61b8      	str	r0, [r7, #24]
        break;
 8003752:	e013      	b.n	800377c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003754:	f7fe fdf4 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 8003758:	61b8      	str	r0, [r7, #24]
        break;
 800375a:	e00f      	b.n	800377c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800375c:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <UART_SetConfig+0x4c4>)
 800375e:	61bb      	str	r3, [r7, #24]
        break;
 8003760:	e00c      	b.n	800377c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003762:	f7fe fd07 	bl	8002174 <HAL_RCC_GetSysClockFreq>
 8003766:	61b8      	str	r0, [r7, #24]
        break;
 8003768:	e008      	b.n	800377c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800376a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800376e:	61bb      	str	r3, [r7, #24]
        break;
 8003770:	e004      	b.n	800377c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	77bb      	strb	r3, [r7, #30]
        break;
 800377a:	bf00      	nop
    }

    if (pclk != 0U)
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d018      	beq.n	80037b4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	085a      	lsrs	r2, r3, #1
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	441a      	add	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	fbb2 f3f3 	udiv	r3, r2, r3
 8003794:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b0f      	cmp	r3, #15
 800379a:	d909      	bls.n	80037b0 <UART_SetConfig+0x4a0>
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a2:	d205      	bcs.n	80037b0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	60da      	str	r2, [r3, #12]
 80037ae:	e001      	b.n	80037b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80037c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40007c00 	.word	0x40007c00
 80037d0:	40023800 	.word	0x40023800
 80037d4:	00f42400 	.word	0x00f42400

080037d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	f003 0310 	and.w	r3, r3, #16
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	f003 0320 	and.w	r3, r3, #32
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d01a      	beq.n	80038ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038d6:	d10a      	bne.n	80038ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	605a      	str	r2, [r3, #4]
  }
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af02      	add	r7, sp, #8
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800392c:	f7fd fd5c 	bl	80013e8 <HAL_GetTick>
 8003930:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b08      	cmp	r3, #8
 800393e:	d10e      	bne.n	800395e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003940:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f81b 	bl	800398a <UART_WaitOnFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e011      	b.n	8003982 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2220      	movs	r2, #32
 8003962:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b09c      	sub	sp, #112	; 0x70
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	603b      	str	r3, [r7, #0]
 8003996:	4613      	mov	r3, r2
 8003998:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800399a:	e0a7      	b.n	8003aec <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800399e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a2:	f000 80a3 	beq.w	8003aec <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a6:	f7fd fd1f 	bl	80013e8 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d302      	bcc.n	80039bc <UART_WaitOnFlagUntilTimeout+0x32>
 80039b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d13f      	bne.n	8003a3c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039c4:	e853 3f00 	ldrex	r3, [r3]
 80039c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80039ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039d0:	667b      	str	r3, [r7, #100]	; 0x64
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039e2:	e841 2300 	strex	r3, r2, [r1]
 80039e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80039e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1e6      	bne.n	80039bc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3308      	adds	r3, #8
 80039f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f8:	e853 3f00 	ldrex	r3, [r3]
 80039fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a00:	f023 0301 	bic.w	r3, r3, #1
 8003a04:	663b      	str	r3, [r7, #96]	; 0x60
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3308      	adds	r3, #8
 8003a0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a16:	e841 2300 	strex	r3, r2, [r1]
 8003a1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e5      	bne.n	80039ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2220      	movs	r2, #32
 8003a26:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e068      	b.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d050      	beq.n	8003aec <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a58:	d148      	bne.n	8003aec <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a62:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a82:	637b      	str	r3, [r7, #52]	; 0x34
 8003a84:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e6      	bne.n	8003a64 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3308      	adds	r3, #8
 8003a9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	66bb      	str	r3, [r7, #104]	; 0x68
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ab6:	623a      	str	r2, [r7, #32]
 8003ab8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	69f9      	ldr	r1, [r7, #28]
 8003abc:	6a3a      	ldr	r2, [r7, #32]
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e5      	bne.n	8003a96 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2220      	movs	r2, #32
 8003ace:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e010      	b.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	69da      	ldr	r2, [r3, #28]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	4013      	ands	r3, r2
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	79fb      	ldrb	r3, [r7, #7]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	f43f af48 	beq.w	800399c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3770      	adds	r7, #112	; 0x70
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b085      	sub	sp, #20
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003b20:	2300      	movs	r3, #0
 8003b22:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003b24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b28:	2b84      	cmp	r3, #132	; 0x84
 8003b2a:	d005      	beq.n	8003b38 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003b2c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4413      	add	r3, r2
 8003b34:	3303      	adds	r3, #3
 8003b36:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003b38:	68fb      	ldr	r3, [r7, #12]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003b4a:	f000 fae9 	bl	8004120 <vTaskStartScheduler>
  
  return osOK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b56:	b089      	sub	sp, #36	; 0x24
 8003b58:	af04      	add	r7, sp, #16
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d020      	beq.n	8003ba8 <osThreadCreate+0x54>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01c      	beq.n	8003ba8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685c      	ldr	r4, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691e      	ldr	r6, [r3, #16]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff ffc8 	bl	8003b16 <makeFreeRtosPriority>
 8003b86:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b90:	9202      	str	r2, [sp, #8]
 8003b92:	9301      	str	r3, [sp, #4]
 8003b94:	9100      	str	r1, [sp, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	4632      	mov	r2, r6
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	f000 f8ed 	bl	8003d7c <xTaskCreateStatic>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	e01c      	b.n	8003be2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685c      	ldr	r4, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bb4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff ffaa 	bl	8003b16 <makeFreeRtosPriority>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	f107 030c 	add.w	r3, r7, #12
 8003bc8:	9301      	str	r3, [sp, #4]
 8003bca:	9200      	str	r2, [sp, #0]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	4632      	mov	r2, r6
 8003bd0:	4629      	mov	r1, r5
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	f000 f935 	bl	8003e42 <xTaskCreate>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d001      	beq.n	8003be2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e000      	b.n	8003be4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003be2:	68fb      	ldr	r3, [r7, #12]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <osDelay+0x16>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	e000      	b.n	8003c04 <osDelay+0x18>
 8003c02:	2301      	movs	r3, #1
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fa55 	bl	80040b4 <vTaskDelay>
  
  return osOK;
 8003c0a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f103 0208 	add.w	r2, r3, #8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f04f 32ff 	mov.w	r2, #4294967295
 8003c2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f103 0208 	add.w	r2, r3, #8
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f103 0208 	add.w	r2, r3, #8
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b085      	sub	sp, #20
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	601a      	str	r2, [r3, #0]
}
 8003caa:	bf00      	nop
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b085      	sub	sp, #20
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ccc:	d103      	bne.n	8003cd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	e00c      	b.n	8003cf0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3308      	adds	r3, #8
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	e002      	b.n	8003ce4 <vListInsert+0x2e>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d2f6      	bcs.n	8003cde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	601a      	str	r2, [r3, #0]
}
 8003d1c:	bf00      	nop
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6892      	ldr	r2, [r2, #8]
 8003d3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6852      	ldr	r2, [r2, #4]
 8003d48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d103      	bne.n	8003d5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	1e5a      	subs	r2, r3, #1
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08e      	sub	sp, #56	; 0x38
 8003d80:	af04      	add	r7, sp, #16
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10c      	bne.n	8003daa <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d94:	b672      	cpsid	i
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	b662      	cpsie	i
 8003da4:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003da6:	bf00      	nop
 8003da8:	e7fe      	b.n	8003da8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8003daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10c      	bne.n	8003dca <xTaskCreateStatic+0x4e>
	__asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	b672      	cpsid	i
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	b662      	cpsie	i
 8003dc4:	61fb      	str	r3, [r7, #28]
}
 8003dc6:	bf00      	nop
 8003dc8:	e7fe      	b.n	8003dc8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003dca:	2354      	movs	r3, #84	; 0x54
 8003dcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	2b54      	cmp	r3, #84	; 0x54
 8003dd2:	d00c      	beq.n	8003dee <xTaskCreateStatic+0x72>
	__asm volatile
 8003dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd8:	b672      	cpsid	i
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	b662      	cpsie	i
 8003de8:	61bb      	str	r3, [r7, #24]
}
 8003dea:	bf00      	nop
 8003dec:	e7fe      	b.n	8003dec <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003dee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d01e      	beq.n	8003e34 <xTaskCreateStatic+0xb8>
 8003df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01b      	beq.n	8003e34 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	2202      	movs	r2, #2
 8003e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e0e:	2300      	movs	r3, #0
 8003e10:	9303      	str	r3, [sp, #12]
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	9302      	str	r3, [sp, #8]
 8003e16:	f107 0314 	add.w	r3, r7, #20
 8003e1a:	9301      	str	r3, [sp, #4]
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	68b9      	ldr	r1, [r7, #8]
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f850 	bl	8003ecc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e2e:	f000 f8d7 	bl	8003fe0 <prvAddNewTaskToReadyList>
 8003e32:	e001      	b.n	8003e38 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e38:	697b      	ldr	r3, [r7, #20]
	}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3728      	adds	r7, #40	; 0x28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b08c      	sub	sp, #48	; 0x30
 8003e46:	af04      	add	r7, sp, #16
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	603b      	str	r3, [r7, #0]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e52:	88fb      	ldrh	r3, [r7, #6]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fec0 	bl	8004bdc <pvPortMalloc>
 8003e5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00e      	beq.n	8003e82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e64:	2054      	movs	r0, #84	; 0x54
 8003e66:	f000 feb9 	bl	8004bdc <pvPortMalloc>
 8003e6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
 8003e78:	e005      	b.n	8003e86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e7a:	6978      	ldr	r0, [r7, #20]
 8003e7c:	f000 ff78 	bl	8004d70 <vPortFree>
 8003e80:	e001      	b.n	8003e86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d017      	beq.n	8003ebc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e94:	88fa      	ldrh	r2, [r7, #6]
 8003e96:	2300      	movs	r3, #0
 8003e98:	9303      	str	r3, [sp, #12]
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	9302      	str	r3, [sp, #8]
 8003e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea0:	9301      	str	r3, [sp, #4]
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68b9      	ldr	r1, [r7, #8]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f80e 	bl	8003ecc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003eb0:	69f8      	ldr	r0, [r7, #28]
 8003eb2:	f000 f895 	bl	8003fe0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	61bb      	str	r3, [r7, #24]
 8003eba:	e002      	b.n	8003ec2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ec2:	69bb      	ldr	r3, [r7, #24]
	}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3720      	adds	r7, #32
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b088      	sub	sp, #32
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003ee4:	440b      	add	r3, r1
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	f023 0307 	bic.w	r3, r3, #7
 8003ef2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00c      	beq.n	8003f18 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8003efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f02:	b672      	cpsid	i
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	b662      	cpsie	i
 8003f12:	617b      	str	r3, [r7, #20]
}
 8003f14:	bf00      	nop
 8003f16:	e7fe      	b.n	8003f16 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d01f      	beq.n	8003f5e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61fb      	str	r3, [r7, #28]
 8003f22:	e012      	b.n	8003f4a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	4413      	add	r3, r2
 8003f2a:	7819      	ldrb	r1, [r3, #0]
 8003f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	4413      	add	r3, r2
 8003f32:	3334      	adds	r3, #52	; 0x34
 8003f34:	460a      	mov	r2, r1
 8003f36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d006      	beq.n	8003f52 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	3301      	adds	r3, #1
 8003f48:	61fb      	str	r3, [r7, #28]
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	2b0f      	cmp	r3, #15
 8003f4e:	d9e9      	bls.n	8003f24 <prvInitialiseNewTask+0x58>
 8003f50:	e000      	b.n	8003f54 <prvInitialiseNewTask+0x88>
			{
				break;
 8003f52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f5c:	e003      	b.n	8003f66 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f68:	2b06      	cmp	r3, #6
 8003f6a:	d901      	bls.n	8003f70 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f6c:	2306      	movs	r3, #6
 8003f6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f7a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	2200      	movs	r2, #0
 8003f80:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	3304      	adds	r3, #4
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff fe64 	bl	8003c54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8e:	3318      	adds	r3, #24
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff fe5f 	bl	8003c54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9e:	f1c3 0207 	rsb	r2, r3, #7
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003faa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fae:	2200      	movs	r2, #0
 8003fb0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	68f9      	ldr	r1, [r7, #12]
 8003fbe:	69b8      	ldr	r0, [r7, #24]
 8003fc0:	f000 fc14 	bl	80047ec <pxPortInitialiseStack>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fd6:	bf00      	nop
 8003fd8:	3720      	adds	r7, #32
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fe8:	f000 fd10 	bl	8004a0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fec:	4b2a      	ldr	r3, [pc, #168]	; (8004098 <prvAddNewTaskToReadyList+0xb8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	4a29      	ldr	r2, [pc, #164]	; (8004098 <prvAddNewTaskToReadyList+0xb8>)
 8003ff4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ff6:	4b29      	ldr	r3, [pc, #164]	; (800409c <prvAddNewTaskToReadyList+0xbc>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ffe:	4a27      	ldr	r2, [pc, #156]	; (800409c <prvAddNewTaskToReadyList+0xbc>)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004004:	4b24      	ldr	r3, [pc, #144]	; (8004098 <prvAddNewTaskToReadyList+0xb8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d110      	bne.n	800402e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800400c:	f000 fac8 	bl	80045a0 <prvInitialiseTaskLists>
 8004010:	e00d      	b.n	800402e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004012:	4b23      	ldr	r3, [pc, #140]	; (80040a0 <prvAddNewTaskToReadyList+0xc0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d109      	bne.n	800402e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800401a:	4b20      	ldr	r3, [pc, #128]	; (800409c <prvAddNewTaskToReadyList+0xbc>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	429a      	cmp	r2, r3
 8004026:	d802      	bhi.n	800402e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004028:	4a1c      	ldr	r2, [pc, #112]	; (800409c <prvAddNewTaskToReadyList+0xbc>)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800402e:	4b1d      	ldr	r3, [pc, #116]	; (80040a4 <prvAddNewTaskToReadyList+0xc4>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3301      	adds	r3, #1
 8004034:	4a1b      	ldr	r2, [pc, #108]	; (80040a4 <prvAddNewTaskToReadyList+0xc4>)
 8004036:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	2201      	movs	r2, #1
 800403e:	409a      	lsls	r2, r3
 8004040:	4b19      	ldr	r3, [pc, #100]	; (80040a8 <prvAddNewTaskToReadyList+0xc8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4313      	orrs	r3, r2
 8004046:	4a18      	ldr	r2, [pc, #96]	; (80040a8 <prvAddNewTaskToReadyList+0xc8>)
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4a15      	ldr	r2, [pc, #84]	; (80040ac <prvAddNewTaskToReadyList+0xcc>)
 8004058:	441a      	add	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3304      	adds	r3, #4
 800405e:	4619      	mov	r1, r3
 8004060:	4610      	mov	r0, r2
 8004062:	f7ff fe04 	bl	8003c6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004066:	f000 fd05 	bl	8004a74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800406a:	4b0d      	ldr	r3, [pc, #52]	; (80040a0 <prvAddNewTaskToReadyList+0xc0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00e      	beq.n	8004090 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004072:	4b0a      	ldr	r3, [pc, #40]	; (800409c <prvAddNewTaskToReadyList+0xbc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	429a      	cmp	r2, r3
 800407e:	d207      	bcs.n	8004090 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004080:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <prvAddNewTaskToReadyList+0xd0>)
 8004082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004090:	bf00      	nop
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	2000045c 	.word	0x2000045c
 800409c:	2000035c 	.word	0x2000035c
 80040a0:	20000468 	.word	0x20000468
 80040a4:	20000478 	.word	0x20000478
 80040a8:	20000464 	.word	0x20000464
 80040ac:	20000360 	.word	0x20000360
 80040b0:	e000ed04 	.word	0xe000ed04

080040b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d019      	beq.n	80040fa <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80040c6:	4b14      	ldr	r3, [pc, #80]	; (8004118 <vTaskDelay+0x64>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00c      	beq.n	80040e8 <vTaskDelay+0x34>
	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	b672      	cpsid	i
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	b662      	cpsie	i
 80040e2:	60bb      	str	r3, [r7, #8]
}
 80040e4:	bf00      	nop
 80040e6:	e7fe      	b.n	80040e6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80040e8:	f000 f87e 	bl	80041e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040ec:	2100      	movs	r1, #0
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fb16 	bl	8004720 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040f4:	f000 f886 	bl	8004204 <xTaskResumeAll>
 80040f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d107      	bne.n	8004110 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004100:	4b06      	ldr	r3, [pc, #24]	; (800411c <vTaskDelay+0x68>)
 8004102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004110:	bf00      	nop
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	20000484 	.word	0x20000484
 800411c:	e000ed04 	.word	0xe000ed04

08004120 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	; 0x28
 8004124:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004126:	2300      	movs	r3, #0
 8004128:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800412a:	2300      	movs	r3, #0
 800412c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800412e:	463a      	mov	r2, r7
 8004130:	1d39      	adds	r1, r7, #4
 8004132:	f107 0308 	add.w	r3, r7, #8
 8004136:	4618      	mov	r0, r3
 8004138:	f7fc f9e8 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800413c:	6839      	ldr	r1, [r7, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	9202      	str	r2, [sp, #8]
 8004144:	9301      	str	r3, [sp, #4]
 8004146:	2300      	movs	r3, #0
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	2300      	movs	r3, #0
 800414c:	460a      	mov	r2, r1
 800414e:	4920      	ldr	r1, [pc, #128]	; (80041d0 <vTaskStartScheduler+0xb0>)
 8004150:	4820      	ldr	r0, [pc, #128]	; (80041d4 <vTaskStartScheduler+0xb4>)
 8004152:	f7ff fe13 	bl	8003d7c <xTaskCreateStatic>
 8004156:	4603      	mov	r3, r0
 8004158:	4a1f      	ldr	r2, [pc, #124]	; (80041d8 <vTaskStartScheduler+0xb8>)
 800415a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800415c:	4b1e      	ldr	r3, [pc, #120]	; (80041d8 <vTaskStartScheduler+0xb8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004164:	2301      	movs	r3, #1
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	e001      	b.n	800416e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800416a:	2300      	movs	r3, #0
 800416c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d118      	bne.n	80041a6 <vTaskStartScheduler+0x86>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	b672      	cpsid	i
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	b662      	cpsie	i
 8004188:	613b      	str	r3, [r7, #16]
}
 800418a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800418c:	4b13      	ldr	r3, [pc, #76]	; (80041dc <vTaskStartScheduler+0xbc>)
 800418e:	f04f 32ff 	mov.w	r2, #4294967295
 8004192:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004194:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <vTaskStartScheduler+0xc0>)
 8004196:	2201      	movs	r2, #1
 8004198:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800419a:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <vTaskStartScheduler+0xc4>)
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041a0:	f000 fbb6 	bl	8004910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041a4:	e010      	b.n	80041c8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ac:	d10c      	bne.n	80041c8 <vTaskStartScheduler+0xa8>
	__asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b2:	b672      	cpsid	i
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	b662      	cpsie	i
 80041c2:	60fb      	str	r3, [r7, #12]
}
 80041c4:	bf00      	nop
 80041c6:	e7fe      	b.n	80041c6 <vTaskStartScheduler+0xa6>
}
 80041c8:	bf00      	nop
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	08005060 	.word	0x08005060
 80041d4:	08004571 	.word	0x08004571
 80041d8:	20000480 	.word	0x20000480
 80041dc:	2000047c 	.word	0x2000047c
 80041e0:	20000468 	.word	0x20000468
 80041e4:	20000460 	.word	0x20000460

080041e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80041ec:	4b04      	ldr	r3, [pc, #16]	; (8004200 <vTaskSuspendAll+0x18>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3301      	adds	r3, #1
 80041f2:	4a03      	ldr	r2, [pc, #12]	; (8004200 <vTaskSuspendAll+0x18>)
 80041f4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80041f6:	bf00      	nop
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	20000484 	.word	0x20000484

08004204 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800420e:	2300      	movs	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004212:	4b42      	ldr	r3, [pc, #264]	; (800431c <xTaskResumeAll+0x118>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10c      	bne.n	8004234 <xTaskResumeAll+0x30>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	b672      	cpsid	i
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	b662      	cpsie	i
 800422e:	603b      	str	r3, [r7, #0]
}
 8004230:	bf00      	nop
 8004232:	e7fe      	b.n	8004232 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004234:	f000 fbea 	bl	8004a0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004238:	4b38      	ldr	r3, [pc, #224]	; (800431c <xTaskResumeAll+0x118>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3b01      	subs	r3, #1
 800423e:	4a37      	ldr	r2, [pc, #220]	; (800431c <xTaskResumeAll+0x118>)
 8004240:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004242:	4b36      	ldr	r3, [pc, #216]	; (800431c <xTaskResumeAll+0x118>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d161      	bne.n	800430e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800424a:	4b35      	ldr	r3, [pc, #212]	; (8004320 <xTaskResumeAll+0x11c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d05d      	beq.n	800430e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004252:	e02e      	b.n	80042b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004254:	4b33      	ldr	r3, [pc, #204]	; (8004324 <xTaskResumeAll+0x120>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3318      	adds	r3, #24
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fd61 	bl	8003d28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3304      	adds	r3, #4
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fd5c 	bl	8003d28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	2201      	movs	r2, #1
 8004276:	409a      	lsls	r2, r3
 8004278:	4b2b      	ldr	r3, [pc, #172]	; (8004328 <xTaskResumeAll+0x124>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4313      	orrs	r3, r2
 800427e:	4a2a      	ldr	r2, [pc, #168]	; (8004328 <xTaskResumeAll+0x124>)
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004286:	4613      	mov	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4a27      	ldr	r2, [pc, #156]	; (800432c <xTaskResumeAll+0x128>)
 8004290:	441a      	add	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3304      	adds	r3, #4
 8004296:	4619      	mov	r1, r3
 8004298:	4610      	mov	r0, r2
 800429a:	f7ff fce8 	bl	8003c6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a2:	4b23      	ldr	r3, [pc, #140]	; (8004330 <xTaskResumeAll+0x12c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d302      	bcc.n	80042b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80042ac:	4b21      	ldr	r3, [pc, #132]	; (8004334 <xTaskResumeAll+0x130>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042b2:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <xTaskResumeAll+0x120>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1cc      	bne.n	8004254 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80042c0:	f000 fa0e 	bl	80046e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80042c4:	4b1c      	ldr	r3, [pc, #112]	; (8004338 <xTaskResumeAll+0x134>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d010      	beq.n	80042f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042d0:	f000 f836 	bl	8004340 <xTaskIncrementTick>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80042da:	4b16      	ldr	r3, [pc, #88]	; (8004334 <xTaskResumeAll+0x130>)
 80042dc:	2201      	movs	r2, #1
 80042de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1f1      	bne.n	80042d0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80042ec:	4b12      	ldr	r3, [pc, #72]	; (8004338 <xTaskResumeAll+0x134>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042f2:	4b10      	ldr	r3, [pc, #64]	; (8004334 <xTaskResumeAll+0x130>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d009      	beq.n	800430e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042fa:	2301      	movs	r3, #1
 80042fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042fe:	4b0f      	ldr	r3, [pc, #60]	; (800433c <xTaskResumeAll+0x138>)
 8004300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800430e:	f000 fbb1 	bl	8004a74 <vPortExitCritical>

	return xAlreadyYielded;
 8004312:	68bb      	ldr	r3, [r7, #8]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20000484 	.word	0x20000484
 8004320:	2000045c 	.word	0x2000045c
 8004324:	2000041c 	.word	0x2000041c
 8004328:	20000464 	.word	0x20000464
 800432c:	20000360 	.word	0x20000360
 8004330:	2000035c 	.word	0x2000035c
 8004334:	20000470 	.word	0x20000470
 8004338:	2000046c 	.word	0x2000046c
 800433c:	e000ed04 	.word	0xe000ed04

08004340 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800434a:	4b4f      	ldr	r3, [pc, #316]	; (8004488 <xTaskIncrementTick+0x148>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	f040 808a 	bne.w	8004468 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004354:	4b4d      	ldr	r3, [pc, #308]	; (800448c <xTaskIncrementTick+0x14c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3301      	adds	r3, #1
 800435a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800435c:	4a4b      	ldr	r2, [pc, #300]	; (800448c <xTaskIncrementTick+0x14c>)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d122      	bne.n	80043ae <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8004368:	4b49      	ldr	r3, [pc, #292]	; (8004490 <xTaskIncrementTick+0x150>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00c      	beq.n	800438c <xTaskIncrementTick+0x4c>
	__asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004376:	b672      	cpsid	i
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	b662      	cpsie	i
 8004386:	603b      	str	r3, [r7, #0]
}
 8004388:	bf00      	nop
 800438a:	e7fe      	b.n	800438a <xTaskIncrementTick+0x4a>
 800438c:	4b40      	ldr	r3, [pc, #256]	; (8004490 <xTaskIncrementTick+0x150>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	4b40      	ldr	r3, [pc, #256]	; (8004494 <xTaskIncrementTick+0x154>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a3e      	ldr	r2, [pc, #248]	; (8004490 <xTaskIncrementTick+0x150>)
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	4a3e      	ldr	r2, [pc, #248]	; (8004494 <xTaskIncrementTick+0x154>)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	4b3d      	ldr	r3, [pc, #244]	; (8004498 <xTaskIncrementTick+0x158>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3301      	adds	r3, #1
 80043a6:	4a3c      	ldr	r2, [pc, #240]	; (8004498 <xTaskIncrementTick+0x158>)
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	f000 f999 	bl	80046e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043ae:	4b3b      	ldr	r3, [pc, #236]	; (800449c <xTaskIncrementTick+0x15c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d348      	bcc.n	800444a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043b8:	4b35      	ldr	r3, [pc, #212]	; (8004490 <xTaskIncrementTick+0x150>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d104      	bne.n	80043cc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043c2:	4b36      	ldr	r3, [pc, #216]	; (800449c <xTaskIncrementTick+0x15c>)
 80043c4:	f04f 32ff 	mov.w	r2, #4294967295
 80043c8:	601a      	str	r2, [r3, #0]
					break;
 80043ca:	e03e      	b.n	800444a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043cc:	4b30      	ldr	r3, [pc, #192]	; (8004490 <xTaskIncrementTick+0x150>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d203      	bcs.n	80043ec <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043e4:	4a2d      	ldr	r2, [pc, #180]	; (800449c <xTaskIncrementTick+0x15c>)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80043ea:	e02e      	b.n	800444a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	3304      	adds	r3, #4
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff fc99 	bl	8003d28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d004      	beq.n	8004408 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	3318      	adds	r3, #24
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff fc90 	bl	8003d28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	2201      	movs	r2, #1
 800440e:	409a      	lsls	r2, r3
 8004410:	4b23      	ldr	r3, [pc, #140]	; (80044a0 <xTaskIncrementTick+0x160>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4313      	orrs	r3, r2
 8004416:	4a22      	ldr	r2, [pc, #136]	; (80044a0 <xTaskIncrementTick+0x160>)
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4a1f      	ldr	r2, [pc, #124]	; (80044a4 <xTaskIncrementTick+0x164>)
 8004428:	441a      	add	r2, r3
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	3304      	adds	r3, #4
 800442e:	4619      	mov	r1, r3
 8004430:	4610      	mov	r0, r2
 8004432:	f7ff fc1c 	bl	8003c6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443a:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <xTaskIncrementTick+0x168>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	429a      	cmp	r2, r3
 8004442:	d3b9      	bcc.n	80043b8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8004444:	2301      	movs	r3, #1
 8004446:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004448:	e7b6      	b.n	80043b8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800444a:	4b17      	ldr	r3, [pc, #92]	; (80044a8 <xTaskIncrementTick+0x168>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004450:	4914      	ldr	r1, [pc, #80]	; (80044a4 <xTaskIncrementTick+0x164>)
 8004452:	4613      	mov	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	440b      	add	r3, r1
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d907      	bls.n	8004472 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8004462:	2301      	movs	r3, #1
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	e004      	b.n	8004472 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004468:	4b10      	ldr	r3, [pc, #64]	; (80044ac <xTaskIncrementTick+0x16c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3301      	adds	r3, #1
 800446e:	4a0f      	ldr	r2, [pc, #60]	; (80044ac <xTaskIncrementTick+0x16c>)
 8004470:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004472:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <xTaskIncrementTick+0x170>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800447a:	2301      	movs	r3, #1
 800447c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800447e:	697b      	ldr	r3, [r7, #20]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	20000484 	.word	0x20000484
 800448c:	20000460 	.word	0x20000460
 8004490:	20000414 	.word	0x20000414
 8004494:	20000418 	.word	0x20000418
 8004498:	20000474 	.word	0x20000474
 800449c:	2000047c 	.word	0x2000047c
 80044a0:	20000464 	.word	0x20000464
 80044a4:	20000360 	.word	0x20000360
 80044a8:	2000035c 	.word	0x2000035c
 80044ac:	2000046c 	.word	0x2000046c
 80044b0:	20000470 	.word	0x20000470

080044b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044ba:	4b28      	ldr	r3, [pc, #160]	; (800455c <vTaskSwitchContext+0xa8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044c2:	4b27      	ldr	r3, [pc, #156]	; (8004560 <vTaskSwitchContext+0xac>)
 80044c4:	2201      	movs	r2, #1
 80044c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044c8:	e041      	b.n	800454e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80044ca:	4b25      	ldr	r3, [pc, #148]	; (8004560 <vTaskSwitchContext+0xac>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044d0:	4b24      	ldr	r3, [pc, #144]	; (8004564 <vTaskSwitchContext+0xb0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	fab3 f383 	clz	r3, r3
 80044dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80044de:	7afb      	ldrb	r3, [r7, #11]
 80044e0:	f1c3 031f 	rsb	r3, r3, #31
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	4920      	ldr	r1, [pc, #128]	; (8004568 <vTaskSwitchContext+0xb4>)
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	4613      	mov	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	440b      	add	r3, r1
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10c      	bne.n	8004514 <vTaskSwitchContext+0x60>
	__asm volatile
 80044fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fe:	b672      	cpsid	i
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	b662      	cpsie	i
 800450e:	607b      	str	r3, [r7, #4]
}
 8004510:	bf00      	nop
 8004512:	e7fe      	b.n	8004512 <vTaskSwitchContext+0x5e>
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4a12      	ldr	r2, [pc, #72]	; (8004568 <vTaskSwitchContext+0xb4>)
 8004520:	4413      	add	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	3308      	adds	r3, #8
 8004536:	429a      	cmp	r2, r3
 8004538:	d104      	bne.n	8004544 <vTaskSwitchContext+0x90>
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	605a      	str	r2, [r3, #4]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	4a08      	ldr	r2, [pc, #32]	; (800456c <vTaskSwitchContext+0xb8>)
 800454c:	6013      	str	r3, [r2, #0]
}
 800454e:	bf00      	nop
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	20000484 	.word	0x20000484
 8004560:	20000470 	.word	0x20000470
 8004564:	20000464 	.word	0x20000464
 8004568:	20000360 	.word	0x20000360
 800456c:	2000035c 	.word	0x2000035c

08004570 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004578:	f000 f852 	bl	8004620 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800457c:	4b06      	ldr	r3, [pc, #24]	; (8004598 <prvIdleTask+0x28>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d9f9      	bls.n	8004578 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <prvIdleTask+0x2c>)
 8004586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004594:	e7f0      	b.n	8004578 <prvIdleTask+0x8>
 8004596:	bf00      	nop
 8004598:	20000360 	.word	0x20000360
 800459c:	e000ed04 	.word	0xe000ed04

080045a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045a6:	2300      	movs	r3, #0
 80045a8:	607b      	str	r3, [r7, #4]
 80045aa:	e00c      	b.n	80045c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	4613      	mov	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4a12      	ldr	r2, [pc, #72]	; (8004600 <prvInitialiseTaskLists+0x60>)
 80045b8:	4413      	add	r3, r2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff fb2a 	bl	8003c14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3301      	adds	r3, #1
 80045c4:	607b      	str	r3, [r7, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b06      	cmp	r3, #6
 80045ca:	d9ef      	bls.n	80045ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045cc:	480d      	ldr	r0, [pc, #52]	; (8004604 <prvInitialiseTaskLists+0x64>)
 80045ce:	f7ff fb21 	bl	8003c14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045d2:	480d      	ldr	r0, [pc, #52]	; (8004608 <prvInitialiseTaskLists+0x68>)
 80045d4:	f7ff fb1e 	bl	8003c14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045d8:	480c      	ldr	r0, [pc, #48]	; (800460c <prvInitialiseTaskLists+0x6c>)
 80045da:	f7ff fb1b 	bl	8003c14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045de:	480c      	ldr	r0, [pc, #48]	; (8004610 <prvInitialiseTaskLists+0x70>)
 80045e0:	f7ff fb18 	bl	8003c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045e4:	480b      	ldr	r0, [pc, #44]	; (8004614 <prvInitialiseTaskLists+0x74>)
 80045e6:	f7ff fb15 	bl	8003c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045ea:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <prvInitialiseTaskLists+0x78>)
 80045ec:	4a05      	ldr	r2, [pc, #20]	; (8004604 <prvInitialiseTaskLists+0x64>)
 80045ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045f0:	4b0a      	ldr	r3, [pc, #40]	; (800461c <prvInitialiseTaskLists+0x7c>)
 80045f2:	4a05      	ldr	r2, [pc, #20]	; (8004608 <prvInitialiseTaskLists+0x68>)
 80045f4:	601a      	str	r2, [r3, #0]
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000360 	.word	0x20000360
 8004604:	200003ec 	.word	0x200003ec
 8004608:	20000400 	.word	0x20000400
 800460c:	2000041c 	.word	0x2000041c
 8004610:	20000430 	.word	0x20000430
 8004614:	20000448 	.word	0x20000448
 8004618:	20000414 	.word	0x20000414
 800461c:	20000418 	.word	0x20000418

08004620 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004626:	e019      	b.n	800465c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004628:	f000 f9f0 	bl	8004a0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800462c:	4b10      	ldr	r3, [pc, #64]	; (8004670 <prvCheckTasksWaitingTermination+0x50>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3304      	adds	r3, #4
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff fb75 	bl	8003d28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800463e:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <prvCheckTasksWaitingTermination+0x54>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3b01      	subs	r3, #1
 8004644:	4a0b      	ldr	r2, [pc, #44]	; (8004674 <prvCheckTasksWaitingTermination+0x54>)
 8004646:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <prvCheckTasksWaitingTermination+0x58>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3b01      	subs	r3, #1
 800464e:	4a0a      	ldr	r2, [pc, #40]	; (8004678 <prvCheckTasksWaitingTermination+0x58>)
 8004650:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004652:	f000 fa0f 	bl	8004a74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f810 	bl	800467c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <prvCheckTasksWaitingTermination+0x58>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1e1      	bne.n	8004628 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000430 	.word	0x20000430
 8004674:	2000045c 	.word	0x2000045c
 8004678:	20000444 	.word	0x20000444

0800467c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800468a:	2b00      	cmp	r3, #0
 800468c:	d108      	bne.n	80046a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fb6c 	bl	8004d70 <vPortFree>
				vPortFree( pxTCB );
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 fb69 	bl	8004d70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800469e:	e01a      	b.n	80046d6 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d103      	bne.n	80046b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fb60 	bl	8004d70 <vPortFree>
	}
 80046b0:	e011      	b.n	80046d6 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d00c      	beq.n	80046d6 <prvDeleteTCB+0x5a>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	b672      	cpsid	i
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	b662      	cpsie	i
 80046d0:	60fb      	str	r3, [r7, #12]
}
 80046d2:	bf00      	nop
 80046d4:	e7fe      	b.n	80046d4 <prvDeleteTCB+0x58>
	}
 80046d6:	bf00      	nop
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046e6:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <prvResetNextTaskUnblockTime+0x38>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d104      	bne.n	80046fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046f0:	4b0a      	ldr	r3, [pc, #40]	; (800471c <prvResetNextTaskUnblockTime+0x3c>)
 80046f2:	f04f 32ff 	mov.w	r2, #4294967295
 80046f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046f8:	e008      	b.n	800470c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046fa:	4b07      	ldr	r3, [pc, #28]	; (8004718 <prvResetNextTaskUnblockTime+0x38>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	4a04      	ldr	r2, [pc, #16]	; (800471c <prvResetNextTaskUnblockTime+0x3c>)
 800470a:	6013      	str	r3, [r2, #0]
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	20000414 	.word	0x20000414
 800471c:	2000047c 	.word	0x2000047c

08004720 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800472a:	4b29      	ldr	r3, [pc, #164]	; (80047d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004730:	4b28      	ldr	r3, [pc, #160]	; (80047d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3304      	adds	r3, #4
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff faf6 	bl	8003d28 <uxListRemove>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10b      	bne.n	800475a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004742:	4b24      	ldr	r3, [pc, #144]	; (80047d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	2201      	movs	r2, #1
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43da      	mvns	r2, r3
 8004750:	4b21      	ldr	r3, [pc, #132]	; (80047d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4013      	ands	r3, r2
 8004756:	4a20      	ldr	r2, [pc, #128]	; (80047d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004758:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004760:	d10a      	bne.n	8004778 <prvAddCurrentTaskToDelayedList+0x58>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d007      	beq.n	8004778 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004768:	4b1a      	ldr	r3, [pc, #104]	; (80047d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3304      	adds	r3, #4
 800476e:	4619      	mov	r1, r3
 8004770:	481a      	ldr	r0, [pc, #104]	; (80047dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004772:	f7ff fa7c 	bl	8003c6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004776:	e026      	b.n	80047c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4413      	add	r3, r2
 800477e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004780:	4b14      	ldr	r3, [pc, #80]	; (80047d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	429a      	cmp	r2, r3
 800478e:	d209      	bcs.n	80047a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004790:	4b13      	ldr	r3, [pc, #76]	; (80047e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4b0f      	ldr	r3, [pc, #60]	; (80047d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3304      	adds	r3, #4
 800479a:	4619      	mov	r1, r3
 800479c:	4610      	mov	r0, r2
 800479e:	f7ff fa8a 	bl	8003cb6 <vListInsert>
}
 80047a2:	e010      	b.n	80047c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047a4:	4b0f      	ldr	r3, [pc, #60]	; (80047e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3304      	adds	r3, #4
 80047ae:	4619      	mov	r1, r3
 80047b0:	4610      	mov	r0, r2
 80047b2:	f7ff fa80 	bl	8003cb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047b6:	4b0c      	ldr	r3, [pc, #48]	; (80047e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d202      	bcs.n	80047c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80047c0:	4a09      	ldr	r2, [pc, #36]	; (80047e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	6013      	str	r3, [r2, #0]
}
 80047c6:	bf00      	nop
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000460 	.word	0x20000460
 80047d4:	2000035c 	.word	0x2000035c
 80047d8:	20000464 	.word	0x20000464
 80047dc:	20000448 	.word	0x20000448
 80047e0:	20000418 	.word	0x20000418
 80047e4:	20000414 	.word	0x20000414
 80047e8:	2000047c 	.word	0x2000047c

080047ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3b04      	subs	r3, #4
 80047fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004804:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	3b04      	subs	r3, #4
 800480a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f023 0201 	bic.w	r2, r3, #1
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3b04      	subs	r3, #4
 800481a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800481c:	4a0c      	ldr	r2, [pc, #48]	; (8004850 <pxPortInitialiseStack+0x64>)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3b14      	subs	r3, #20
 8004826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3b04      	subs	r3, #4
 8004832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f06f 0202 	mvn.w	r2, #2
 800483a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	3b20      	subs	r3, #32
 8004840:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004842:	68fb      	ldr	r3, [r7, #12]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	08004855 	.word	0x08004855

08004854 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800485a:	2300      	movs	r3, #0
 800485c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800485e:	4b14      	ldr	r3, [pc, #80]	; (80048b0 <prvTaskExitError+0x5c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d00c      	beq.n	8004882 <prvTaskExitError+0x2e>
	__asm volatile
 8004868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486c:	b672      	cpsid	i
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	b662      	cpsie	i
 800487c:	60fb      	str	r3, [r7, #12]
}
 800487e:	bf00      	nop
 8004880:	e7fe      	b.n	8004880 <prvTaskExitError+0x2c>
	__asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	b672      	cpsid	i
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	b662      	cpsie	i
 8004896:	60bb      	str	r3, [r7, #8]
}
 8004898:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800489a:	bf00      	nop
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0fc      	beq.n	800489c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048a2:	bf00      	nop
 80048a4:	bf00      	nop
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	2000000c 	.word	0x2000000c
	...

080048c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80048c0:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <pxCurrentTCBConst2>)
 80048c2:	6819      	ldr	r1, [r3, #0]
 80048c4:	6808      	ldr	r0, [r1, #0]
 80048c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ca:	f380 8809 	msr	PSP, r0
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f04f 0000 	mov.w	r0, #0
 80048d6:	f380 8811 	msr	BASEPRI, r0
 80048da:	4770      	bx	lr
 80048dc:	f3af 8000 	nop.w

080048e0 <pxCurrentTCBConst2>:
 80048e0:	2000035c 	.word	0x2000035c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop

080048e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80048e8:	4808      	ldr	r0, [pc, #32]	; (800490c <prvPortStartFirstTask+0x24>)
 80048ea:	6800      	ldr	r0, [r0, #0]
 80048ec:	6800      	ldr	r0, [r0, #0]
 80048ee:	f380 8808 	msr	MSP, r0
 80048f2:	f04f 0000 	mov.w	r0, #0
 80048f6:	f380 8814 	msr	CONTROL, r0
 80048fa:	b662      	cpsie	i
 80048fc:	b661      	cpsie	f
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	df00      	svc	0
 8004908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800490a:	bf00      	nop
 800490c:	e000ed08 	.word	0xe000ed08

08004910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004916:	4b37      	ldr	r3, [pc, #220]	; (80049f4 <xPortStartScheduler+0xe4>)
 8004918:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	22ff      	movs	r2, #255	; 0xff
 8004926:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	b2db      	uxtb	r3, r3
 8004934:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004938:	b2da      	uxtb	r2, r3
 800493a:	4b2f      	ldr	r3, [pc, #188]	; (80049f8 <xPortStartScheduler+0xe8>)
 800493c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800493e:	4b2f      	ldr	r3, [pc, #188]	; (80049fc <xPortStartScheduler+0xec>)
 8004940:	2207      	movs	r2, #7
 8004942:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004944:	e009      	b.n	800495a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004946:	4b2d      	ldr	r3, [pc, #180]	; (80049fc <xPortStartScheduler+0xec>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3b01      	subs	r3, #1
 800494c:	4a2b      	ldr	r2, [pc, #172]	; (80049fc <xPortStartScheduler+0xec>)
 800494e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	b2db      	uxtb	r3, r3
 8004958:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800495a:	78fb      	ldrb	r3, [r7, #3]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004962:	2b80      	cmp	r3, #128	; 0x80
 8004964:	d0ef      	beq.n	8004946 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004966:	4b25      	ldr	r3, [pc, #148]	; (80049fc <xPortStartScheduler+0xec>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f1c3 0307 	rsb	r3, r3, #7
 800496e:	2b04      	cmp	r3, #4
 8004970:	d00c      	beq.n	800498c <xPortStartScheduler+0x7c>
	__asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004976:	b672      	cpsid	i
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	b662      	cpsie	i
 8004986:	60bb      	str	r3, [r7, #8]
}
 8004988:	bf00      	nop
 800498a:	e7fe      	b.n	800498a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800498c:	4b1b      	ldr	r3, [pc, #108]	; (80049fc <xPortStartScheduler+0xec>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	021b      	lsls	r3, r3, #8
 8004992:	4a1a      	ldr	r2, [pc, #104]	; (80049fc <xPortStartScheduler+0xec>)
 8004994:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004996:	4b19      	ldr	r3, [pc, #100]	; (80049fc <xPortStartScheduler+0xec>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800499e:	4a17      	ldr	r2, [pc, #92]	; (80049fc <xPortStartScheduler+0xec>)
 80049a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049aa:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <xPortStartScheduler+0xf0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a14      	ldr	r2, [pc, #80]	; (8004a00 <xPortStartScheduler+0xf0>)
 80049b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049b6:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <xPortStartScheduler+0xf0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a11      	ldr	r2, [pc, #68]	; (8004a00 <xPortStartScheduler+0xf0>)
 80049bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80049c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80049c2:	f000 f8dd 	bl	8004b80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049c6:	4b0f      	ldr	r3, [pc, #60]	; (8004a04 <xPortStartScheduler+0xf4>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80049cc:	f000 f8fc 	bl	8004bc8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049d0:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <xPortStartScheduler+0xf8>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a0c      	ldr	r2, [pc, #48]	; (8004a08 <xPortStartScheduler+0xf8>)
 80049d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80049da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049dc:	f7ff ff84 	bl	80048e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80049e0:	f7ff fd68 	bl	80044b4 <vTaskSwitchContext>
	prvTaskExitError();
 80049e4:	f7ff ff36 	bl	8004854 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	e000e400 	.word	0xe000e400
 80049f8:	20000488 	.word	0x20000488
 80049fc:	2000048c 	.word	0x2000048c
 8004a00:	e000ed20 	.word	0xe000ed20
 8004a04:	2000000c 	.word	0x2000000c
 8004a08:	e000ef34 	.word	0xe000ef34

08004a0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
	__asm volatile
 8004a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a16:	b672      	cpsid	i
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	b662      	cpsie	i
 8004a26:	607b      	str	r3, [r7, #4]
}
 8004a28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a2a:	4b10      	ldr	r3, [pc, #64]	; (8004a6c <vPortEnterCritical+0x60>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	4a0e      	ldr	r2, [pc, #56]	; (8004a6c <vPortEnterCritical+0x60>)
 8004a32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a34:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <vPortEnterCritical+0x60>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d111      	bne.n	8004a60 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a3c:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <vPortEnterCritical+0x64>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00c      	beq.n	8004a60 <vPortEnterCritical+0x54>
	__asm volatile
 8004a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4a:	b672      	cpsid	i
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	b662      	cpsie	i
 8004a5a:	603b      	str	r3, [r7, #0]
}
 8004a5c:	bf00      	nop
 8004a5e:	e7fe      	b.n	8004a5e <vPortEnterCritical+0x52>
	}
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	2000000c 	.word	0x2000000c
 8004a70:	e000ed04 	.word	0xe000ed04

08004a74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <vPortExitCritical+0x54>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10c      	bne.n	8004a9c <vPortExitCritical+0x28>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	b672      	cpsid	i
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	b662      	cpsie	i
 8004a96:	607b      	str	r3, [r7, #4]
}
 8004a98:	bf00      	nop
 8004a9a:	e7fe      	b.n	8004a9a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <vPortExitCritical+0x54>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	4a09      	ldr	r2, [pc, #36]	; (8004ac8 <vPortExitCritical+0x54>)
 8004aa4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004aa6:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <vPortExitCritical+0x54>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d105      	bne.n	8004aba <vPortExitCritical+0x46>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ab8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	2000000c 	.word	0x2000000c
 8004acc:	00000000 	.word	0x00000000

08004ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ad0:	f3ef 8009 	mrs	r0, PSP
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <pxCurrentTCBConst>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	f01e 0f10 	tst.w	lr, #16
 8004ae0:	bf08      	it	eq
 8004ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aea:	6010      	str	r0, [r2, #0]
 8004aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004af0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004af4:	b672      	cpsid	i
 8004af6:	f380 8811 	msr	BASEPRI, r0
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	b662      	cpsie	i
 8004b04:	f7ff fcd6 	bl	80044b4 <vTaskSwitchContext>
 8004b08:	f04f 0000 	mov.w	r0, #0
 8004b0c:	f380 8811 	msr	BASEPRI, r0
 8004b10:	bc09      	pop	{r0, r3}
 8004b12:	6819      	ldr	r1, [r3, #0]
 8004b14:	6808      	ldr	r0, [r1, #0]
 8004b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1a:	f01e 0f10 	tst.w	lr, #16
 8004b1e:	bf08      	it	eq
 8004b20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b24:	f380 8809 	msr	PSP, r0
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop

08004b30 <pxCurrentTCBConst>:
 8004b30:	2000035c 	.word	0x2000035c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop

08004b38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b42:	b672      	cpsid	i
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	b662      	cpsie	i
 8004b52:	607b      	str	r3, [r7, #4]
}
 8004b54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b56:	f7ff fbf3 	bl	8004340 <xTaskIncrementTick>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b60:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <SysTick_Handler+0x44>)
 8004b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	f383 8811 	msr	BASEPRI, r3
}
 8004b72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	e000ed04 	.word	0xe000ed04

08004b80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b84:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <vPortSetupTimerInterrupt+0x34>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <vPortSetupTimerInterrupt+0x38>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b90:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <vPortSetupTimerInterrupt+0x3c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a0a      	ldr	r2, [pc, #40]	; (8004bc0 <vPortSetupTimerInterrupt+0x40>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	099b      	lsrs	r3, r3, #6
 8004b9c:	4a09      	ldr	r2, [pc, #36]	; (8004bc4 <vPortSetupTimerInterrupt+0x44>)
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ba2:	4b04      	ldr	r3, [pc, #16]	; (8004bb4 <vPortSetupTimerInterrupt+0x34>)
 8004ba4:	2207      	movs	r2, #7
 8004ba6:	601a      	str	r2, [r3, #0]
}
 8004ba8:	bf00      	nop
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	e000e010 	.word	0xe000e010
 8004bb8:	e000e018 	.word	0xe000e018
 8004bbc:	20000000 	.word	0x20000000
 8004bc0:	10624dd3 	.word	0x10624dd3
 8004bc4:	e000e014 	.word	0xe000e014

08004bc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004bc8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004bd8 <vPortEnableVFP+0x10>
 8004bcc:	6801      	ldr	r1, [r0, #0]
 8004bce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004bd2:	6001      	str	r1, [r0, #0]
 8004bd4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004bd6:	bf00      	nop
 8004bd8:	e000ed88 	.word	0xe000ed88

08004bdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08a      	sub	sp, #40	; 0x28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004be8:	f7ff fafe 	bl	80041e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004bec:	4b5b      	ldr	r3, [pc, #364]	; (8004d5c <pvPortMalloc+0x180>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004bf4:	f000 f91a 	bl	8004e2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004bf8:	4b59      	ldr	r3, [pc, #356]	; (8004d60 <pvPortMalloc+0x184>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f040 8092 	bne.w	8004d2a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01f      	beq.n	8004c4c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4413      	add	r3, r2
 8004c12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d016      	beq.n	8004c4c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f023 0307 	bic.w	r3, r3, #7
 8004c24:	3308      	adds	r3, #8
 8004c26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00c      	beq.n	8004c4c <pvPortMalloc+0x70>
	__asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c36:	b672      	cpsid	i
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	b662      	cpsie	i
 8004c46:	617b      	str	r3, [r7, #20]
}
 8004c48:	bf00      	nop
 8004c4a:	e7fe      	b.n	8004c4a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d06b      	beq.n	8004d2a <pvPortMalloc+0x14e>
 8004c52:	4b44      	ldr	r3, [pc, #272]	; (8004d64 <pvPortMalloc+0x188>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d866      	bhi.n	8004d2a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c5c:	4b42      	ldr	r3, [pc, #264]	; (8004d68 <pvPortMalloc+0x18c>)
 8004c5e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c60:	4b41      	ldr	r3, [pc, #260]	; (8004d68 <pvPortMalloc+0x18c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c66:	e004      	b.n	8004c72 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d903      	bls.n	8004c84 <pvPortMalloc+0xa8>
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1f1      	bne.n	8004c68 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c84:	4b35      	ldr	r3, [pc, #212]	; (8004d5c <pvPortMalloc+0x180>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d04d      	beq.n	8004d2a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2208      	movs	r2, #8
 8004c94:	4413      	add	r3, r2
 8004c96:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	1ad2      	subs	r2, r2, r3
 8004ca8:	2308      	movs	r3, #8
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d921      	bls.n	8004cf4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00c      	beq.n	8004cdc <pvPortMalloc+0x100>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	b672      	cpsid	i
 8004cc8:	f383 8811 	msr	BASEPRI, r3
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	b662      	cpsie	i
 8004cd6:	613b      	str	r3, [r7, #16]
}
 8004cd8:	bf00      	nop
 8004cda:	e7fe      	b.n	8004cda <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	1ad2      	subs	r2, r2, r3
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004cee:	69b8      	ldr	r0, [r7, #24]
 8004cf0:	f000 f8fe 	bl	8004ef0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004cf4:	4b1b      	ldr	r3, [pc, #108]	; (8004d64 <pvPortMalloc+0x188>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	4a19      	ldr	r2, [pc, #100]	; (8004d64 <pvPortMalloc+0x188>)
 8004d00:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d02:	4b18      	ldr	r3, [pc, #96]	; (8004d64 <pvPortMalloc+0x188>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	4b19      	ldr	r3, [pc, #100]	; (8004d6c <pvPortMalloc+0x190>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d203      	bcs.n	8004d16 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d0e:	4b15      	ldr	r3, [pc, #84]	; (8004d64 <pvPortMalloc+0x188>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a16      	ldr	r2, [pc, #88]	; (8004d6c <pvPortMalloc+0x190>)
 8004d14:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	4b11      	ldr	r3, [pc, #68]	; (8004d60 <pvPortMalloc+0x184>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d2a:	f7ff fa6b 	bl	8004204 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00c      	beq.n	8004d52 <pvPortMalloc+0x176>
	__asm volatile
 8004d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3c:	b672      	cpsid	i
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	b662      	cpsie	i
 8004d4c:	60fb      	str	r3, [r7, #12]
}
 8004d4e:	bf00      	nop
 8004d50:	e7fe      	b.n	8004d50 <pvPortMalloc+0x174>
	return pvReturn;
 8004d52:	69fb      	ldr	r3, [r7, #28]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3728      	adds	r7, #40	; 0x28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20004098 	.word	0x20004098
 8004d60:	200040a4 	.word	0x200040a4
 8004d64:	2000409c 	.word	0x2000409c
 8004d68:	20004090 	.word	0x20004090
 8004d6c:	200040a0 	.word	0x200040a0

08004d70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d04c      	beq.n	8004e1c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d82:	2308      	movs	r3, #8
 8004d84:	425b      	negs	r3, r3
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	4413      	add	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	4b23      	ldr	r3, [pc, #140]	; (8004e24 <vPortFree+0xb4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10c      	bne.n	8004db8 <vPortFree+0x48>
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da2:	b672      	cpsid	i
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	b662      	cpsie	i
 8004db2:	60fb      	str	r3, [r7, #12]
}
 8004db4:	bf00      	nop
 8004db6:	e7fe      	b.n	8004db6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00c      	beq.n	8004dda <vPortFree+0x6a>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	b672      	cpsid	i
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	b662      	cpsie	i
 8004dd4:	60bb      	str	r3, [r7, #8]
}
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	4b11      	ldr	r3, [pc, #68]	; (8004e24 <vPortFree+0xb4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4013      	ands	r3, r2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d019      	beq.n	8004e1c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d115      	bne.n	8004e1c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <vPortFree+0xb4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	401a      	ands	r2, r3
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e00:	f7ff f9f2 	bl	80041e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	4b07      	ldr	r3, [pc, #28]	; (8004e28 <vPortFree+0xb8>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	4a06      	ldr	r2, [pc, #24]	; (8004e28 <vPortFree+0xb8>)
 8004e10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e12:	6938      	ldr	r0, [r7, #16]
 8004e14:	f000 f86c 	bl	8004ef0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004e18:	f7ff f9f4 	bl	8004204 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e1c:	bf00      	nop
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	200040a4 	.word	0x200040a4
 8004e28:	2000409c 	.word	0x2000409c

08004e2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e32:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004e36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e38:	4b27      	ldr	r3, [pc, #156]	; (8004ed8 <prvHeapInit+0xac>)
 8004e3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00c      	beq.n	8004e60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3307      	adds	r3, #7
 8004e4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0307 	bic.w	r3, r3, #7
 8004e52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	4a1f      	ldr	r2, [pc, #124]	; (8004ed8 <prvHeapInit+0xac>)
 8004e5c:	4413      	add	r3, r2
 8004e5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e64:	4a1d      	ldr	r2, [pc, #116]	; (8004edc <prvHeapInit+0xb0>)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e6a:	4b1c      	ldr	r3, [pc, #112]	; (8004edc <prvHeapInit+0xb0>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	4413      	add	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e78:	2208      	movs	r2, #8
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0307 	bic.w	r3, r3, #7
 8004e86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4a15      	ldr	r2, [pc, #84]	; (8004ee0 <prvHeapInit+0xb4>)
 8004e8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e8e:	4b14      	ldr	r3, [pc, #80]	; (8004ee0 <prvHeapInit+0xb4>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2200      	movs	r2, #0
 8004e94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e96:	4b12      	ldr	r3, [pc, #72]	; (8004ee0 <prvHeapInit+0xb4>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	1ad2      	subs	r2, r2, r3
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004eac:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <prvHeapInit+0xb4>)
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	4a0a      	ldr	r2, [pc, #40]	; (8004ee4 <prvHeapInit+0xb8>)
 8004eba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	4a09      	ldr	r2, [pc, #36]	; (8004ee8 <prvHeapInit+0xbc>)
 8004ec2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ec4:	4b09      	ldr	r3, [pc, #36]	; (8004eec <prvHeapInit+0xc0>)
 8004ec6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004eca:	601a      	str	r2, [r3, #0]
}
 8004ecc:	bf00      	nop
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	20000490 	.word	0x20000490
 8004edc:	20004090 	.word	0x20004090
 8004ee0:	20004098 	.word	0x20004098
 8004ee4:	200040a0 	.word	0x200040a0
 8004ee8:	2000409c 	.word	0x2000409c
 8004eec:	200040a4 	.word	0x200040a4

08004ef0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ef8:	4b28      	ldr	r3, [pc, #160]	; (8004f9c <prvInsertBlockIntoFreeList+0xac>)
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	e002      	b.n	8004f04 <prvInsertBlockIntoFreeList+0x14>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d8f7      	bhi.n	8004efe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	4413      	add	r3, r2
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d108      	bne.n	8004f32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	441a      	add	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	441a      	add	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d118      	bne.n	8004f78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	4b15      	ldr	r3, [pc, #84]	; (8004fa0 <prvInsertBlockIntoFreeList+0xb0>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d00d      	beq.n	8004f6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	441a      	add	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	e008      	b.n	8004f80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f6e:	4b0c      	ldr	r3, [pc, #48]	; (8004fa0 <prvInsertBlockIntoFreeList+0xb0>)
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	e003      	b.n	8004f80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d002      	beq.n	8004f8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f8e:	bf00      	nop
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	20004090 	.word	0x20004090
 8004fa0:	20004098 	.word	0x20004098

08004fa4 <memset>:
 8004fa4:	4402      	add	r2, r0
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d100      	bne.n	8004fae <memset+0xa>
 8004fac:	4770      	bx	lr
 8004fae:	f803 1b01 	strb.w	r1, [r3], #1
 8004fb2:	e7f9      	b.n	8004fa8 <memset+0x4>

08004fb4 <__libc_init_array>:
 8004fb4:	b570      	push	{r4, r5, r6, lr}
 8004fb6:	4d0d      	ldr	r5, [pc, #52]	; (8004fec <__libc_init_array+0x38>)
 8004fb8:	4c0d      	ldr	r4, [pc, #52]	; (8004ff0 <__libc_init_array+0x3c>)
 8004fba:	1b64      	subs	r4, r4, r5
 8004fbc:	10a4      	asrs	r4, r4, #2
 8004fbe:	2600      	movs	r6, #0
 8004fc0:	42a6      	cmp	r6, r4
 8004fc2:	d109      	bne.n	8004fd8 <__libc_init_array+0x24>
 8004fc4:	4d0b      	ldr	r5, [pc, #44]	; (8004ff4 <__libc_init_array+0x40>)
 8004fc6:	4c0c      	ldr	r4, [pc, #48]	; (8004ff8 <__libc_init_array+0x44>)
 8004fc8:	f000 f818 	bl	8004ffc <_init>
 8004fcc:	1b64      	subs	r4, r4, r5
 8004fce:	10a4      	asrs	r4, r4, #2
 8004fd0:	2600      	movs	r6, #0
 8004fd2:	42a6      	cmp	r6, r4
 8004fd4:	d105      	bne.n	8004fe2 <__libc_init_array+0x2e>
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
 8004fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fdc:	4798      	blx	r3
 8004fde:	3601      	adds	r6, #1
 8004fe0:	e7ee      	b.n	8004fc0 <__libc_init_array+0xc>
 8004fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe6:	4798      	blx	r3
 8004fe8:	3601      	adds	r6, #1
 8004fea:	e7f2      	b.n	8004fd2 <__libc_init_array+0x1e>
 8004fec:	08005088 	.word	0x08005088
 8004ff0:	08005088 	.word	0x08005088
 8004ff4:	08005088 	.word	0x08005088
 8004ff8:	0800508c 	.word	0x0800508c

08004ffc <_init>:
 8004ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffe:	bf00      	nop
 8005000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005002:	bc08      	pop	{r3}
 8005004:	469e      	mov	lr, r3
 8005006:	4770      	bx	lr

08005008 <_fini>:
 8005008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500a:	bf00      	nop
 800500c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800500e:	bc08      	pop	{r3}
 8005010:	469e      	mov	lr, r3
 8005012:	4770      	bx	lr
